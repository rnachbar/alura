Os principais conteudos da internet são HTML, CSS e JAVASCRIPT

Começo de tudo: conteúdo

TAG é um código

############### 1.Introdução ao HTML ###############

A Internet está cada vez mais presente no nosso dia-a-dia, não só porque temos cada vez mais acesso, mas também mais conteúdo online. Temos desde sites pessoais e portfolios até grandes portais. Temos blogs e redes sociais.
Conforme a Internet foi crescendo, ficou mais robusta, isto é, as tecnologias que a sustentam são cada vez mais poderosas e versáteis.

Para a criação de conteúdo para a Internet, HTML, CSS e JavaScript são as tecnologias dominantes atualmente. Se você quer colocar um site online, muito provavelmente terá que saber mexer com essas tecnologias.

Neste curso, vamos ver diversas coisas que conseguimos fazer apenas com HTML e CSS. E como toda tecnologia pode ser bem ou mal utilizada, veremos quais cuidados devemos tomar ao desenvolver páginas para a Internet, quais boas práticas podemos seguir e como elas impactam para nossos usuários finais.

Para estudar essas tecnologias, vamos trabalhar em um projeto de um site pessoal.

HTML
Quando pensamos em fazer uma página, pensamos em fazer isso pois queremos expor algum conteúdo para nossos visitantes. No nosso caso, em que estamos desenvolvendo um site pessoal, queremos divulgar nosso trabalho para o mundo, nossos conhecimentos e qualidades.

Para isso, podemos fazer uma página como a da figura abaixo, com um texto descrevendo nosso trabalho, nossa foto e alguns links para nosso visitante explorar o site.

Todo esse conteúdo e visual precisa ser descrito de alguma forma para o navegador conseguir mostrá-lo para o usuário. É aí que entram em cena o HTML e o CSS.

Vamos começar analisando o conteúdo: temos um título (sobre mim), dois parágrafos de texto, um subtítulo, mais texto... Num editor de texto, conseguimos selecionar o título e aplicar um tamanho de fonte maior, uma cor diferente, centralizar etc. Quando você fizer isso, seu editor de texto provavelmente gravará suas escolhas junto do texto:

Sobre mim = fonte 24pt, branco, centralizado

Moro em São Paulo... = fonte 12pt, preto, justificado

Trabalho usando a web... = fonte 12pt, preto, justificado

Como trabalho = fonte 18pt, preto, à esquerda
No caso do nosso navegador, precisamos fazer isso também: indicar que um determinado trecho do texto tem uma fonte diferente, uma cor diferente... Mas mais ainda: podemos indicar que esse primeiro trecho (sobre mim) é um título da página. Assim, podemos evitar o retrabalho de definir todo o estilo de novo para o próximo título: basta configurarmos, posteriormente, o estilo dos títulos. O mesmo vale para os parágrafos de texto, subtítulos etc.

Sobre mim = título

Moro em São Paulo... = parágrafo

Trabalho usando a web... = parágrafo

Como trabalho = subtítulo
Tags
O HTML serve justamente para indicar o que significa cada trecho de texto que digitamos. Para o nosso exemplo, poderíamos colocar essas informações no texto da seguinte forma:

<h1>Sobre mim</h1>

<p>Moro em São Paulo...</p>

<p>Trabalho usando a web...</p>

<h2>Como trabalho</h2>
Repare nas marcações que colocamos: <h1>, <h2> e <p>. Essas marcações são o que chamamos de tags do HTML, e são o bloco de construção fundamental da linguagem.

Repare que usamos também </h1>, </h2> e </p>. Quando colocamos essas marcações, estamos indicando o final de uma tag ou, como dizemos, fechamos a tag que estava aberta.

Com isso, já conseguimos representar o conteúdo básico da página. Mas repare que algumas partes do texto são mais importantes, têm destaque. Novamente, para indicar que uma parte do texto tem uma característica especial, vamos colocar uma tag ao redor dela:

<p>Moro em São Paulo mas atendo clientes do mundo todo. Sou conhecido por
fazer produtos de <em>qualidade</em>, <em>durabilidade</em> e que <em>agregam
valor</em> para meus clientes.</p>
Repare que, para dar uma ênfase ao texto, usamos a tag <em>. Em outro trecho, onde temos um texto com um destaque mais forte, podemos usar a tag <strong>:

<p>... Crio sites para todos, seguindo as principais diretivas de
<strong>acessibilidade</strong>, <strong>responsividade</strong> e <strong>web
semântica</strong>, sem descuidar da qualidade de código.</p>
Em ambos os casos, veja que colocamos tags dentro de tags. Esse é um recurso que vamos explorar bastante ao longo do curso para poder detalhar bem as informações da nossa página.

Estrutura básica
Apesar de já podermos salvar esse código num arquivo com a extensão .html e abri-lo num navegador, possivelmente teremos problemas, como na imagem abaixo.

Página bagunçada no navegador

Isso acontece porque, apesar de termos escrito código HTML correto, o navegador não tem todas as informações necessárias para mostrar nossa página corretamente.

A informação faltante mais visível aos nossos olhos é a codificação dos caracteres. Repare que toda letra que deveria aparecer acentuada está com problema. Isso acontece porque, atualmente, existem várias formas de representar caracteres acentuados em código binário, que é como o computador guarda nosso arquivo no disco. Precisamos, então, indicar qual a codificação que estamos usando em nossa página.

Da mesma forma que usamos tags para indicar o significado de cada trecho de texto, vamos usar uma tag para indicar a codificação da página: a tag <meta>.

<meta charset="utf-8">
No exemplo acima, estamos indicando que nossa página usa a codificação de caracteres UTF-8. Essa é uma codificação bastante popular e completa, e recomendamos que você sempre use ela.

Uma outra informação faltando, mais sutil, é o título da página. Não o título "Sobre mim", que já está lá, mas um título na janela do navegador, para que nosso visitante saiba qual página está aberta naquela janela do navegador.

Novamente, vamos usar uma tag para passar essa informação para o navegador: a tag <title>.

<title>Biografia - João da Silva</title>
Uma outra informação legal de passarmos para o navegador, para ajudar ainda mais nosso visitante, é mostrar um ícone correspondente à nossa página, para facilitar a identificação da janela.

Para fazer isso, podemos colocar um arquivo chamado favicon.png na mesma pasta do nosso arquivo .html. E, para garantir que o navegador vai mostrá-la, podemos colocar mais uma tag na nossa página: a tag <link>.

<link rel="icon" href="favicon.png">
Repare que a tag <link> é um pouco mais complexa que as outras que já usamos. Ela tem dois atributos: rel e href. O atributo rel diz que tipo de conteúdo queremos referenciar com ela (um ícone, no nosso caso). Já o atributo href diz onde esse conteúdo se encontra. Usaremos novamente essa tag mais para a frente.

Com isso, nosso HTML já fica mais ou menos assim:

<meta charset="utf-8">
<title>Biografia - João da Silva</title>
<link rel="icon" href="favicon.png">
<h1>Sobre mim</h1>
<p>Moro em São Paulo...</p>
<p>Trabalho usando a web...</p>
<h2>Como trabalho</h2>
Meio bagunçado, não? As informações que são necessárias para o navegador estão misturadas com as informações que queremos mostrar para o visitante do site. Para organizar melhor essas informações, existem duas tags fundamentais da linguagem HTML: <head> e <body>.

A tag <head> serve para agrupar informações para o navegador entender melhor nossa página, como o título da página, o ícone e a codificação. Em outras palavras, as meta-informações da página devem ficar dentro dessa tag.

Já a tag <body> serve para agrupar as informações que queremos mostrar para os usuários, ou seja, o conteúdo que queríamos mostrar originalmente.

Usando essas duas tags, podemos reorganizar nosso código da seguinte forma:

<head>
    <meta charset="utf-8">
    <title>Biografia - João da Silva</title>
    <link rel="icon" href="favicon.png">
</head>
<body>
    <h1>Sobre mim</h1>
    <p>Moro em São Paulo...</p>
    <p>Trabalho usando a web...</p>
    <h2>Como trabalho</h2>
</body>
Repare um detalhe no código escrito acima: as tags que estão dentro das tags <head> e <body> foram escritas com alguns espaços à frente. Escrever código assim é uma boa prática, conhecida como indentação. Ela nos ajuda a enxergar melhor a estrutura da nossa página e vai ser bem importante conforme nossa página vai ficando mais complexa.

O código fica melhor organizado usando as tags <head> e <body>, mas ainda falta uma tag essencial para embrulhar toda a nossa página e indicar para o navegador que estamos escrevendo código HTML em nosso arquivo: a tag <html>. Colocando-a no nosso código, chegamos ao seguinte resultado:

<html>
    <head>
        <meta charset="utf-8">
        <title>Biografia - João da Silva</title>
        <link rel="icon" href="favicon.png">
    </head>
    <body>
        <h1>Sobre mim</h1>
        <p>Moro em São Paulo...</p>
        <p>Trabalho usando a web...</p>
        <h2>Como trabalho</h2>
    </body>
</html>
Pronto, agora o navegador sabe que estamos usando HTML. Mas estamos esquecendo de um detalhe: o HTML é uma linguagem já com uma certa idade, que passou por reformulações para se aperfeiçoar e ficar mais poderosa. Assim, não basta dizer para o navegador que estamos usando HTML; precisamos dizer qual versão do HTML estamos usando. É aí que entra uma instrução especial para o navegador, que parece uma tag mas não é: o DOCTYPE.

Como o nome diz, essa instrução serve para dizer para o navegador (ou qualquer programa que queira ler nosso arquivo) qual tipo de documento ele está lendo. Ou seja, essa instrução não é exclusiva da linguagem HTML, mas vem de uma linguagem mais genérica chamada SGML (do inglês Standard Generalized Markup Language). Sendo assim, nessa instrução vamos dizer para o navegador que estamos usando HTML e qual versão do HTML estamos usando. Mas qual versão estamos usando?

Neste curso, vamos estudar a versão mais recente do HTML, que é a versão 5. Mais para a frente, vamos estudar as diferenças dessa versão para as anteriores e por que devemos usá-la atualmente.

Precisamos, então, colocar a instrução DOCTYPE correspondente ao HTML 5 no nosso código HTML. Então colocamos no início do documento o seguinte código:

<!DOCTYPE html>
E pronto! Agora o navegador consegue entender corretamente nosso código HTML. Repare que não há nada nesse código que diga que é a versão 5 do HTML que estamos usando; isso é proposital. A organização que define como deve ser a linguagem HTML - a W3C - quis facilitar a nossa vida e decidiu criar o DOCTYPE acima, que diz para o navegador que estamos usando a última versão do HTML disponível. Assim, quando surgir uma nova versão do HTML, nossa página não precisa ser alterada.

Resumindo, nosso código, no final, vai ficar assim:

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>Biografia - João da Silva</title>
        <link rel="icon" href="favicon.png">
    </head>
    <body>
        <h1>Sobre mim</h1>
        <p>Moro em São Paulo...</p>
        <p>Trabalho usando a web...</p>
        <h2>Como trabalho</h2>
    </body>
</html>
Essa estrutura, com DOCTYPE e tag <html> com <head> e <body>, deve ser seguida por todo documento HTML para que os navegadores interpretem-no corretamente.

Estilo
Com o código HTML, conseguimos definir o quê vamos mostrar, mas não como vamos mostrar. Esse é um papel que cabe ao CSS, tecnologia que vamos abordar no próximo capítulo.

Que tipo de linguagem é o HTML? Ou, em outras palavras, qual o propósito da linguagem HTML?

Linguagem de marcação, ou seja, serve para indicar o que cada trecho de um documento representa
 
A linguagem HTML serve para marcar conteúdo, ou seja, especificar o que cada letra, palavra e frase significa. Usamos ela para criar páginas pois, assim, o navegador e outras ferramentas que trabalham na Internet conseguem analisar e processar nosso conteúdo, apresentando-o de forma adequada para os usuários.

Qual a estrutura básica de uma página HTML?

DOCTYPE e tag html com tags head e body dentro, nessa ordem
 
Muito bem ! Toda página HTML deve seguir essa estrutura:
<!DOCTYPE html>
<html>
    <head>
        tags com informações para o navegador
    </head>
    <body>
        conteúdo para o usuário
    </body>
</html>

Qual a função da instrução DOCTYPE em um arquivo HTML?

Indicar que estamos usando a linguagem HTML e qual versão da linguagem estamos usando
 
A instrução DOCTYPE serve para indicar qual linguagem estamos usando no nosso documento e em qual versão. Por isso é essencial para que o computador processe corretamente nosso arquivo.
Atualmente, usamos a instrução <!DOCTYPE html> para indicar que usamos a última versão do HTML. Antigamente, era necessário usar <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">, por exemplo, para indicar que estávamos usando a versão 4 do HTML na sua variante estrita.

Qual a codificação mais recomendada para escrevermos páginas para a Web? Por que?

UTF-8, por ser uma codificação abrangente e bem suportada
 
A codificação UTF-8 abrange praticamente todos os sistemas de escritas usadas pelo mundo todo. Além disso, todos os computadores vêm com suporte a essa codificação. Assim, se queremos que nossas páginas sejam acessíveis por todos, a codificação UTF-8 é a melhor opção.

Qual a diferença entre a tag <h1> e a tag <title>? Qual o propósito de cada uma?

A tag <title> serve para passar para o navegador qual o título da aba/janela em que a página será exibida. Já a tag <h1> serve para mostrar para o usuário qual o título principal do conteúdo da página.


############### 2.Introdução a CSS ###############

Introdução a CSS
Na aula anterior, vimos como criar o conteúdo de uma página usando a linguagem HTML. Porém, nossa página ainda está muito básica. Isso porque o navegador já sabe o quê queremos mostrar, mas não sabe como queremos mostrar, então mostra apenas o conteúdo, sem estilo algum.

Precisamos, então, ensiná-lo como queremos mostrar os elementos da nossa página. Imagine que queremos definir o tamanho da letra (fonte) como 16 pixels. O navegador nos permite especificar isso da seguinte forma:

font-size: 16px;
Essa forma de declarar como queremos mostrar um elemento é o que chamamos de linguagem CSS. Nessa linguagem, conseguimos configurar diversos aspectos da exibição dos elementos da nossa página.

Repare no formato da declaração: dizemos qual propriedade queremos mudar (font-size) e colocamos dois-pontos para separá-la do valor que lhe queremos dar, no nosso caso o tamanho da fonte (16 pixels). Por fim, colocamos um ponto-e-vírgula no final, para indicar que nossa declaração terminou.

Associando estilos a elementos
Na declaração que fizemos, dissemos que queríamos mudar o tamanho da fonte. Mas de qual elemento? Precisamos sempre associar estilo a elemento. Uma forma de fazer isso é usar o atributo style das tags do HTML. Por exemplo, podemos mudar a fonte do elemento <h2> da nossa página:

<h2 style="font-size: 16px;">Como trabalho</h2>
Apesar de funcionar, não é muito prático: se quisermos deixar todos os subtítulos da página com a mesma aparência, teremos que repetir esse código em todas as tags <h2>. Então, melhor que isso, podemos usar a tag <style>, colocando o estilo desejado dentro dela:

<style>
    font-size: 16px;
</style>
E onde colocamos a tag <style>? No lugar onde vão as tags com as informações para o navegador: dentro da tag <head>.

Está faltando algo na declaração acima, não? Anteriormente, dissemos que todo estilo deveria ser associado a um elemento da página. A qual elemento a declaração acima está associada? Precisamos fazer associação selecionando um elemento da página para essa regra. É aí que entram os seletores da linguagem CSS.

<style>
    h2 {
        font-size: 16px;
    }
</style>
No exemplo acima, estamos selecionando os elementos <h2> da página e aplicando o estilo que queríamos, o tamanho de fonte. Repare que precisamos abrir chaves logo após o seletor e fechar chaves ao final do estilo. Podemos colocar mais regras dentro das chaves, se quisermos. Por exemplo, podemos alterar a fonte usada no subtitulo para "Arial":

<style>
    h2 {
        font-family: "Arial";
        font-size: 16px;
   }
</style>
Colocando o CSS no seu devido lugar
Com a tag <style>, conseguimos não só evitar repetição como também deixar nosso código mais organizado: tudo que é relativo à aparência da página fica agrupado num só lugar, facilitando a manutenção da página.

Mas ainda temos um problema: nosso site não vai ter uma página só. Essas outras páginas muito provavelmente terão uma cara parecida com a página que estamos desenvolvendo agora. Então o CSS também será bem parecido, com bastante coisa repetida. Pior: se quisermos alterar alguma característica visual do site inteiro, teremos que fazer a alteração em todas as páginas do site. Muito trabalho com muita chance de erro!

Como podemos evitar essa repetição? Colocando o CSS num arquivo separado! Podemos, então, criar um arquivo chamado site.css com o conteúdo que tínhamos colocado na tag <style>:

h2 {
    font-family: "Arial";
    font-size: 16px;
}
Agora, no arquivo HTML, precisamos dizer para o navegador que esse arquivo CSS precisa ser carregado. Para isso, usamos a tag <link>. Lembra dela?

<link rel="stylesheet" href="site.css">
Assim como a tag <link> que criamos para escolher o ícone, essa tag também vai dentro da tag <head>. E agora, quando o navegador encontrar essa tag, ele vai baixar o arquivo site.css e, por causa do atributo rel="stylesheet", ele sabe que esse arquivo tem o estilo da página.

Um pouco de cor
Agora que sabemos onde escrever o CSS, podemos começar a especificar o estilo que queremos que nossa página tenha, para chegarmos no resultado mostrado na imagem abaixo.

Vamos começar ajustando as cores. O título tem um fundo roxo. Como alterar a cor de fundo? Como queremos mexer na cor de fundo do título, a propriedade que vamos alterar chama-se background-color. Faz sentido, não? A maior parte das propriedades que podemos alterar no CSS tem um nome bem explicativo. Veremos mais exemplos adiante.

Nosso título está dentro de uma tag <h1>. Então precisamos selecioná-lo para alterar a cor de fundo. Teremos algo assim no CSS, então:

h1 {
    background-color: ????;
}
A questão que resta é: como dizer que queremos a cor roxa? Aliás, qual tom de roxo queremos? Existem vários "roxos". E também existem várias formas de identificar uma cor no CSS. A mais popular é especificar uma mistura das cores primárias vermelho, verde e azul para chegar à cor que queremos, dizendo o "quanto" queremos de cada cor numa escala de 0 a 255. Por exemplo, nosso roxo tem 133 de vermelho, 25 de verde e 68 de azul.

Sabendo disso, basta escrever essa mistura no CSS. Existem duas formas para isso. A mais popular e compacta é usar a notação hexadecimal para representar essas quantidades. Nessa notação, "0" continua sendo "0", mas "10" vira "A", "15" vira a letra "F" e "16" vira "10". Seguindo nessa lógica, "133" vira "85", "25" vira "19" e "68" vira "44". Juntando as cores na ordem vermelho, verde e azul chegamos no formato usado no CSS:

h1 {
    background-color: #851944;
}
Repare que colocamos um cerquilha (#) na frente dos números. Ele faz parte desse formato de cor do CSS e serve para deixar claro para quem ler o código que aquela sequência de números e letras é uma cor.

Outra forma de especificar essa mistura é usando a forma abaixo:

h1 {
    background-color: rgb(133, 25, 68);
}
Precisamos mudar também a cor da letra do nosso título para branco. Para isso, usamos a propriedade color. Nosso CSS fica, então:

h1 {
    background-color: rgb(133, 25, 68);
    color: rgb(255, 255, 255);
}
Ou então, se você preferir a notação hexadecimal:

h1 {
    background-color: #851944;
    color: #FFFFFF;
}
Algumas cores não precisam de tanta precisão assim (de 0 a 255) para serem especificadas; dezesseis níveis de cor (de 0 a 15) já bastariam, economizando um pouco de código para nós. Pois bem: temos uma notação hexadecimal compacta no CSS também! Podemos escrever a cor branca usando essa sintaxe:

h1 {
    background-color: #851944;
    color: #FFF;
}
A cor roxa, por ser mais específica, precisa ser especificada na notação hexadecimal normal. Porém, se a cor fosse #882244, poderíamos escrevê-la como #824.

Uma última cor que precisamos ajustar é a cor de fundo da página. É uma cor quase branca: #F2FFFC. Como fazer para mudar a cor da página toda? Mudando a cor da tag que contém a página toda, que é a tag <body>:

body {
    background-color: #F2FFFC;
}
Ajustando o texto
Uma outra coisa que precisamos ajustar no cabeçalho é o alinhamento do texto. Queremos deixar o título principal centralizado na tela. Para isso, usamos a propriedade text-align com o valor center:

h1 {
    background-color: #851944;
    color: #FFF;
    text-align: center;
}
Precisamos ajustar o alinhamento dos parágrafos de texto, também, deixando as linhas todas com a mesma largura. Podemos, então, selecionar os parágrafos e usar novamente a propriedade text-align, dessa vez com o valor justify:

p {
    text-align: justify;
}
Outra coisa que precisamos ajustar no nosso texto é o tipo da fonte usada na página. Dependendo do navegador e do sistema que você está usar, você verá o texto numa fonte diferente.

Fonte no Firefox

Fonte no Chrome

Se você olhar com atenção a imagem que estamos usando como referência para estilizar nossa página, verá que estamos usando duas fontes diferentes: uma para o título e os subtítulos (Arial) e outra para o texto (Times New Roman). Para mudar as fontes para esses elementos da página, podemos usar a propriedade font-family, passando o nome da fonte que queremos usar para aquele elemento:

h1 {
    background-color: #851944;
    color: #FFF;
    text-align: center;
    font-family: "Arial";
}

h2 {
    font-family: "Arial";
}

p {
    text-align: justify;
    font-family: "Times New Roman";
}
Podemos melhorar um pouco o código CSS, tirando a repetição do nome da fonte. Para isso, podemos selecionar o título e os subtítulos ao mesmo tempo. Conseguimos fazer isso separando os nomes das tags por vírgula no nosso seletor:

h1, h2 {
    font-family: "Arial";
}
Fazendo isso, podemos retirar a declaração de dentro do seletor h1, e tanto os <h1> como os <h2> da página serão exibidos com a fonte Arial.

Só precisamos tomar cuidado com uma coisa: nossa página será exibida nos mais diversos navegadores e sistemas. Será que todos eles têm essas fontes que escolhemos? Provavelmente não. E, se o navegador não encontra a fonte que pedimos, ele vai exibir nossa página com as fontes que ele quiser, possivelmente deixando nossa página bem estranha.

Felizmente, podemos controlar um pouco qual será a fonte usada caso a fonte que escolhemos não seja encontrada, bastando especificar uma fonte alternativa. Por exemplo:

p {
    font-family: "Times New Roman", "Baskerville";
}
Com essa declaração, dizemos para o navegador usar a fonte Baskerville se a fonte Times New Roman não estiver disponível. Agora, será que especificar outra fonte é suficiente? E se a fonte Baskerville não estiver disponível também? Podemos explorar mais e mais possibilidades, ou então abrir mão do controle total da fonte: em vez de escolher a fonte específica, escolher apenas o tipo da fonte que queremos usar. As fontes Times New Roman e Baskerville, por exemplo, são fontes serifadas. Por outro lado, as fontes Arial e Verdana são fontes sem serifa. A diferença pode ser vista na imagem abaixo: as fontes serifadas possuem traços em algumas pontas.

Então podemos dizer para o navegador: se a fonte Times New Roman não estiver disponível, use uma fonte qualquer, desde que ela seja serifada; fazemos isso passando o valor serif para o font-family. Podemos fazer algo semelhante para os títulos e subtítulos, mas dizendo que queremos uma fonte sem serifa com o valor sans-serif.

h1, h2 {
    font-family: "Arial", sans-serif;
}

p {
    font-family: "Times New Roman", serif;
}

Nosso texto começa a ter um pouco mais da aparência que queremos no final. No entanto, o espaçamento entre os elementos da página ainda não está legal. Além disso, antes de podermos nos preocupar com a foto e a barra lateral, faltam alguns elementos no próprio texto. No próximo capítulo cuidaremos desses detalhes.

O que acontece com o texto quando não colocamos uma fonte e um tamanho para ele?

O texto é exibido usando a fonte e o tamanho padrões do navegador, que podem ser modificados pelo usuário
 
Quando não há nenhum estilo definido para o texto de uma página, esse texto é exibido seguindo os padrões definidos nas opções do navegador. O usuário do navegador tem o poder de modificar esse padrão nas opções do navegador para, por exemplo, usar uma fonte maior ou uma fonte que ele ache mais bonita.

O que significa a expressão #35AF18?

A expressão representa uma cor usando a sintaxe hexadecimal do CSS. Nessa sintaxe, especificamos uma cor pela mistura das cores primárias vermelho, verde e azul, nessa ordem. Assim, os dois primeiros caracteres correspondem à quantidade de vermelho, os dois seguintes à quantidade de verde e os dois últimos à quantidade de azul.
Cada dois caracteres representam um número de 0 a 255 na notação hexadecimal:
A = 10
B = 11
C = 12
D = 13
E = 14
F = 15
10 = 16
...
1A = 26
1B = 27
...
20 = 32

Como deve ser a declaração para usar a fonte Merriweather, que é uma fonte serifada? Lembre-se: a fonte pode não estar disponível ou pode não ser carregada, ou seja, deve-se ter uma alternativa que seja o tipo de fonte que deseja-se usar.

font-family: "Merriweather", serif;
 
A resposta correta é:
font-family: "Merriweather", serif;
Toda declaração font-family pode ter, além do nome da fonte que se deseja usar, uma alternativa que seja o tipo de fonte que se deseja usar. Assim, se o navegador não encontrar a fonte desejada, pode recorrer a uma fonte parecida.
Também seria válido especificar mais de uma alternativa como, por exemplo:
font-family: "Merriweather", "Times New Roman", serif;
Mas sempre com o tipo de fonte como última opção.

Agora, aumente o tamanho da fonte na página toda. Qual a melhor alternativa para tal tarefa?

Para aumentar a fonte da página toda, precisamos mudar o font-size no body. Podemos tentar, por exemplo:
body {
  font-size: 20px;
}
O problema é que, se a fonte padrão do usuário tiver tamanho maior ou igual a 20 pixels, estaremos mantendo ou reduzindo o tamanho da fonte padrão!
Para garantir que estamos aumentando a fonte, precisamos usar a fonte padrão como base para nossos ajustes. No caso do tamanho da fonte, precisamos usar a medida de porcentagem para definir seu valor. Isso porque, quando usamos porcentagem na propriedade font-size, ele usa como base para calcular a porcentagem o valor definido anteriormente. Então a melhor solução seria:
body {
  font-size: 120%;
}
Isso aumenta em 20% o tamanho original da fonte.

Se nos basearmos apenas nas fontes que o usuário terá instaladas em sua máquina, teremos poucas opções para enriquecer nosso design. Felizmente, é possível usar uma fonte que não está na máquina do usuário! Podemos pedir para o navegador baixar a fonte necessária para nossa página com algumas linhas de CSS.
A Google disponibiliza um serviço gratuito chamado Google Fonts que tem diversas fontes para baixarmos e usarmos em nossos sites. Esse serviço disponibiliza não apenas o arquivo da fonte em si como também o CSS necessário para o navegador baixar a fonte!

Vamos, então, enriquecer nosso design! No arquivo CSS, use a fonte "Open Sans Condensed" para os títulos (h1 e h2) e a fonte "Crimson Text" para o texto. Já no cabeçalho do arquivo HTML utilize o código abaixo:

<!-- carrega a fonte Crimson Text nas versões normal, itálico e negrito -->
<link rel="stylesheet" href="http://fonts.googleapis.com/css?family=Crimson+Text:400,400italic,600">

<!-- carrega a fonte Open Sans Condensed na versão negrito, -->
<!-- que é a única necessária para os cabeçalhos            -->
<link rel="stylesheet" href="http://fonts.googleapis.com/css?family=Open+Sans+Condensed:700">
Em seguida, no arquivo site.css, podemos usá-las em seus respectivos lugares.

############### 3.Aprofundando no HTML ###############

Aprofundando no HTML
Nas aulas anteriores, vimos um pouco de HTML e CSS e, com o que vimos, já conseguimos fazer uma página web simples, mas usável. Agora vamos além: faremos algo usável e bonito, seguindo boas práticas de código.

A página que fizemos ainda não está completa nem do ponto de vista visual (CSS) nem do ponto de vista de conteúdo (HTML). No HTML, faltam algumas imagens, o menu lateral e o rodapé da página, além de alguns links para auxiliar nossos visitantes na exploração do site.

Vamos ver cada um deles com mais detalhes.

Links
No nosso texto, citamos a realização de trabalhos para grandes empresas. Seria legal levar o nosso visitante a conhecer de perto esses trabalhos! Para isso, poderíamos transformar os nomes das empresas para as quais trabalhamos nesse trecho de texto:

Já desenvolvi projetos para grandes empresas como BMW, UOL e IBM...
em regiões clicáveis, em links.

Imagem dos links

Quando ele clicar no texto "BMW", queremos que o navegador abra a página da BMW (http://www.bmw.com/). Para tornar a região clicável, usamos a tag <a> e, para dizer para onde esse link levará nosso visitante quando clicado, usamos o atributo href dessa tag:

<p>... grandes empresas como <a href="http://www.bmw.com/">BMW</a>...</p>
Mais para baixo no texto, temos outro trecho onde pode ser interessante colocar um link

Para isso, já dei diversas palestras e mantenho um blog.
Podemos levar o visitante para assistir as palestras na página de portfolio ou ler alguns artigos no nosso blog. Então, no nosso HTML, fazemos

<p>... Para isso, já dei <a href="portfolio.html">diversas palestras</a> e mantenho um <a href="blog.html">blog</a>.</p>
Repare que colocamos apenas os nomes dos arquivos nos atributos href mas, normalmente, o endereço que o navegador acessa é algo como http://meusite.com/bio.html. Então, se estamos num endereço como esse, para qual endereço o navegador vai quando clicamos nesse link do portfolio? Ele vai para http://meusite.com/portfolio.html, ou seja, se você não passa o endereço completo, o navegador troca só o final dele. Isso é o que chamamos de link relativo: relativo ao endereço que você está visitando no momento.

No entanto, nada impede que coloquemos o endereço completo no link:

<p>... Para isso, já dei <a href="http://meusite.com/portfolio.html">diversas palestras</a> e mantenho um <a href="http://meusite.com/blog.html">blog</a>.</p>
Esse tipo de link é o que chamamos de link absoluto. Quando queremos endereçar outro site, precisamos usar esse tipo de link. Agora, quando queremos endereçar nosso próprio site, podemos usar links absolutos ou relativos. Mas qual devemos usar?

Imagine que você hospedou seu site com o endereço joaodasilva.com. Depois, para facilitar a vida dos seus visitantes, você resolveu mudar para joao.com. Se você usou links absolutos no seu site, o que acontecerá com eles? Vão apontar para um endereço que não existe mais! Usando links relativos, não temos esse problema. Então, quando queremos referenciar nosso próprio site, o ideal é usar links relativos.

Na verdade, qualquer link que não comece com http é considerado um link relativo. Ou seja, os seguintes links são relativos:

portfolio.html
/posts/html5-e-css3.html
//facebook.com
Para entender como o navegador interpreta cada um deles, considere que você está atualmente na URL http://meusite.com/paginas/bio.html. Os links levarão para os seguintes endereços, respectivamente:

http://meusite.com/paginas/portfolio.html
http://meusite.com/posts/html5-e-css3.html
http://facebook.com
Ou seja: o primeiro link troca somente a última parte do endereço. O segundo, começando com uma barra, troca tudo que vem depois do meusite.com, que é o domínio do site. E o último tipo de link, começando com duas barras, troca tudo que vem depois das duas barras. Ou seja, estivéssemos no endereço https://meusite.com/portfolio.html, o último link nos levaria para https://facebook.com.

Imagens
Queremos colocar nossa foto na nossa página para dar um ar mais pessoal, criar uma relação mais direta com nossos visitantes. Para colocar imagens na página, usamos a tag <img>. Nessa tag, precisamos indicar qual imagem queremos que o navegador carregue. Para isso, a tag <img> tem o atributo src. Então, se queremos carregar o arquivo eu.jpg, colocamos no HTML

<img src="eu.jpg">
Imagem no navegador

Assim como nos links, o endereço dentro do src pode ser relativo ou absoluto.

Quando usamos imagens e outros recursos visuais na nossa página, precisamos lembrar de um caso de uso bastante importante: nem todos os nossos visitantes conseguem enxergar a nossa página. No Brasil, cerca de 3.5% da população tem problemas graves de visão ou cegueira. Porém, mesmo com deficiência visual, essa parcela da população acessa à Internet. Para conseguirem fazer isso, utilizam programas chamados de leitores de tela, que são capazes de ler o conteúdo de uma página e oferecer uma navegação pela página usando o teclado.

Agora, quando usamos uma imagem ou outro recurso visual, como o usuário com deficiência visual terá acesso a ele? No caso de uma imagem, como esse usuário vai conseguir saber que ela existe e qual o conteúdo dela? Precisamos oferecer uma descrição da imagem para esses usuários; fazemos isso por meio do atributo alt da tag <img>:

<img src="eu.jpg" alt="Foto do João da Silva">
Tornar nossa página acessível deve ser uma preocupação constante, afinal não podemos excluir tanta gente do acesso ao nosso site. E já é uma preocupação constante do W3C, o órgão que cuida dos padrões da Web. Tanto é que o W3C definiu que o atributo alt é obrigatório nas tags <img>.

Ainda não podemos esquecer que não só as pessoas com deficiência visual não enxergam nosso site. Ferramentas de busca também não enxergam e, ao fornecer a elas uma página acessível, facilitamos o trabalho de extração e catalogação de conteúdo que elas realizam para fornecerem seus resultados. Na imagem abaixo, por exemplo, podemos ver que, ao buscarmos por "alura" no Google, além da página inicial, ele nos mostra páginas internas do site. O Google consegue nos dar essas páginas internas pois nosso conteúdo está bem marcado.

Alura no Google

Recomendações
Para dar mais credibilidade ao nosso trabalho, é legal colocarmos recomendações de outros profissionais que trabalharam conosco e aprovam nosso serviço. Então vamos citar algumas recomendações que fizeram do nosso trabalho:

João domina as tecnologias como ninguém -- Manoel Santos, Petrobrás
Podemos colocar esse texto em nossa página dentro de uma tag <p> como fizemos com o resto do texto:

<h2>Experiência</h2>
<p>João domina as tecnologias como ninguém -- Manoel Santos, Petrobrás</p>
<p>Já <a href="portfolio.html">desenvolvi projetos...</a>...</p>
Mas vamos retomar um pouco que acabamos de ver com as imagens: isso é acessível? É um texto como qualquer outro, então o computador consegue ler isso. Mas queremos que seja realmente um texto como qualquer outro? Não, esse não é um texto como qualquer outro, afinal estamos citando alguém. Da mesma forma que colocamos o título da página em uma tag <h1> para indicar que ele era, de fato, o título, precisamos colocar a citação dentro de uma tag que indique que ela é realmente uma citação! É aí que entra a tag <blockquote>:

<blockquote>João domina as tecnologias como ninguém -- Manoel Santos, Petrobrás</blockquote>
Mas essa frase não deixa de ser um parágrafo de texto, então podemos manter a tag <p> dentro da tag <blockquote>:

<blockquote><p>João domina as tecnologias como ninguém -- Manoel Santos, Petrobrás</p></blockquote>
Se você escrever isso no seu HTML, vai notar que o navegador já coloca um estilo diferente nessa tag, justamente porque ele identificou que é uma citação.

Citação com estilo diferente

Ainda podemos melhorar um pouco. O nome do autor da frase, por enquanto, está misturado com a própria frase. Podemos separar o nome da frase colocando-os em tags diferentes:

<blockquote>
    <p>João domina as tecnologias como ninguém</p>
    <p>Manoel Santos, Petrobrás</p>
</blockquote>
Mas, de novo, o texto "Manoel Santos, Petrobrás" não é um texto qualquer; é o nome do autor da citação. Então, novamente, podemos usar uma tag mais específica, que transmita essa informação. A tag que indica autores de citações é a tag <cite>:

<blockquote>
    <p>João domina as tecnologias como ninguém</p>
    <cite>Manoel Santos, Petrobrás</cite>
</blockquote>
No caso da tag <cite>, não precisamos colocar a tag <p> dentro. Na verdade, não faz sentido colocá-la: o nome do autor da frase não chega a formar um parágrafo de texto.

HTML e semântica
Essa discussão que acabamos de fazer na verdade vale para todo tipo de conteúdo que queremos representar na página. Devemos descrever bem o conteúdo para que leitores de tela e buscadores consigam processar melhor esse conteúdo e, assim, tornar a informação mais acessível aos nossos visitantes.

Em outras palavras, devemos tentar deixar o nosso código HTML semântico, usando, para isso, as tags mais adequadas a cada tipo de conteúdo.

Vejamos outros exemplos. Na nossa página, teremos uma região com links na lateral direita da tela. Essa região terá um estilo próprio, diferente do resto do texto. Então é interessante isolá-la do resto do texto usando, para isso, uma tag. É bem comum fazermos isso usando a tag <div>:

<h2>Comunidade</h2>
<p>Procuro repassar meu conhecimento...</p>
<img src="eu.jpg" alt="Foto de João da Silva">
<div>
    <a href="home.html">Home</a>
    <a href="portfolio.html">Portfolio</a>
    <a href="bio.html">Sobre mim</a>
</div>
A tag <div> serve justamente para isso: criar regiões, divisões na página. Mas podemos ser mais específicos quanto ao tipo de região que queremos criar! Nesse caso, estamos especificando um conjunto de links para que o usuário possa navegar pelo site. Na versão mais recente do HTML surgiu a tag <nav>, que tem justamente esse propósito: indicar regiões da página que contêm links de navegação pelo site.

<h2>Comunidade</h2>
<p>Procuro repassar meu conhecimento...</p>
<img src="eu.jpg" alt="Foto de João da Silva">
<nav>
    <a href="home.html">Home</a>
    <a href="portfolio.html">Portfolio</a>
    <a href="bio.html">Sobre mim</a>
</nav>
Visualmente, não teremos nenhuma diferença, mas agora os leitores de tela podem oferecer um atalho que leve o usuário mais rapidamente ao menu de navegação do site e os buscadores podem oferecer esses links no resultado da busca. Um HTML semântico melhora a acessibilidade do site para todos.

Um HTML semântico é tão importante que, em sua última atualização, a linguagem HTML incluiu diversas novas tags cujo único propósito é permitir uma marcação mais semântica para nossas páginas! Além da tag <nav> que acabamos de usar, temos diversas outras:

<main>: conteúdo principal da página
<header>: cabeçalho da página ou de uma região dela
<footer>: mesma ideia da tag <header> para o rodapé
<aside>: conteúdo auxiliar ao conteúdo principal, como links relacionados ao conteúdo
<article>: conteúdo que, por si só, já tem um sentido completo, como um post de um blog ou uma notícia
<section>: parte/seção de uma página ou texto
Há ainda muitas outras, que estudaremos aos poucos. Por hora, podemos usar algumas das tags para deixar nosso código mais semântico. O texto da biografia, por exemplo, pode ser embrulhado numa tag <main>. O <nav> da lateral pode ser embrulhado numa tag <aside> junto com o título e os outros links que ainda precisamos colocar para essa parte. Podemos colocar um rodapé na página com uma mensagem de copyright com a tag <footer>. Nosso código ficaria assim:

<!DOCTYPE html>
<html>
<head>
     <!-- aqui continua igual -->
</head>
<body>
    <main>
        <h1>Sobre mim</h1>
        <!-- texto que já escrevemos -->
    </main>
    <img src="eu.jpg" alt="Foto de João da Silva">
    <aside>
        <h1>João da Silva</h1>
        <nav>
            <a href="index.html">Home</a>
            <a href="portfolio.html">Portfolio</a>
            <a href="bio.html">Sobre mim</a>
            <a href="#">Blog</a>
            <a href="contato.html">Contato</a>
        </nav>
        <!-- links das redes sociais -->
    </aside>
    <footer>
        © João da Silva 2014
    </footer>
</body>
</html>
Mais para a frente colocaremos os links das redes sociais mas, por hora, podemos fazer mais uma melhoria do ponto de vista semântico nos links do <nav>: podemos indicar que eles formam uma lista de links. Para isso, usamos as tags <ul> e <li>:

<nav>
    <ul>
        <li><a href="index.html">Home</a></li>
        <li><a href="portfolio.html">Portfolio</a></li>
        <li><a href="bio.html">Sobre mim</a></li>
        <li><a href="blog.html">Blog</a></li>
        <li><a href="contato.html">Contato</a></li>
    </ul>
</nav>
A tag <ul> não é a única tag que existe para fazer listas. Existem também as tags <ol> e <dl>, que veremos mais para a frente.

Entidades HTML
No footer, queremos colocar o símbolo e a mensagem de copyright. Podemos colocar sem problema algum o símbolo © direto no arquivo HTML mas, dependendo do teclado que você usa, pode ser difícil digitá-lo. Além disso, em algumas codificações de arquivo possíveis, o símbolo pode simplesmente não existir (no nosso exemplo, estamos usando o UTF-8, então não corremos esse risco).

Para solucionar esses casos, a linguagem HTML nos permite especificar caracteres especiais por meio das entidades. Então, em vez de digitar ©, podemos digitar &copy; e o navegador entenderá que queremos colocar esse símbolo na página.

Há diversas entidades que podemos usar no nosso código. Abaixo uma lista com alguns exemplos:

&euro;: €
&yen;: ¥
&pound;: £
&reg;: ®
&hearts;: ?
Também temos algumas entidades úteis para poder mostrar código HTML sem que o navegador o entenda como tags. Para podermos colocar o texto "<h1> serve para títulos" na página, por exemplo, precisamos escrever no HTML:

<p>&lt;h1&gt; serve para títulos</p>
As entidades &lt; e &gt; representam, respectivamente o símbolo de menor que (<) e maior que (>).

Arrumando o CSS
Com as alterações que fizemos na página, o visual vai ficar meio estranho. Em particular, o conteúdo da nossa barra lateral ganhou um fundo roxo, igual ao título da página.

Site com o título da barra lateral estilizado incorretamente

Faz um certo sentido isso ter acontecido, afinal, no nosso CSS, temos a seguinte declaração:

h1 {
    text-align: center;
    background-color: #851944;
    color: #FFF;
}
Estamos selecionando todos os <h1> da página, inclusive o da barra lateral! Podemos arrumar isso de duas formas: ou não usamos a tag <h1> na barra lateral ou selecionamos o <h1> que queremos de algum outro jeito.

Faz sentido o <h1> da barra lateral ser, de fato, um <h1>, afinal ele é o título principal da barra lateral. Então vamos ver um outro jeito de selecionar o título do texto principal.

Se olharmos com atenção, veremos que o <h1> com fundo roxo é o único <h1> dentro da tag <main>. Podemos usar essa informação para selecioná-lo. Ou seja, podemos dizer que queremos só os <h1> dentro de <main>. Podemos dizer isso no CSS com o seletor main h1:

main h1 {
    text-align: center;
    background-color: #851944;
    color: #FFF;
}
Quando colocamos nomes de tags separados por espaços no seletor CSS, queremos dizer que um elemento deve estar dentro de outro.

Usando esse truque, já conseguimos arrumar o estilo que ficou quebrado. Ainda há bastante coisa para arrumar no visual, mas veremos como nos próximos capítulos.

Para que serve o atributo alt que colocamos nas tags <img>?

Para usuários com deficiência visual e ferramentas de busca saberem do que se trata a imagem
 
Apesar de alguns navegadores poderem mostrar o texto do atributo alt quando se coloca o mouse em cima da imagem, a principal função desse atributo é tornar a página mais acessível para usuários com deficiência visual e ferramentas de busca.
Deficientes visuais muitas vezes utilizam programas que leem o conteúdo da tela para eles. Esses programas, quando encontram uma tag <img>, podem ler o conteúdo do atributo alt para seus usuários.
Ferramentas de busca utilizam o texto do atributo alt para descobrir do que se trata uma determinada imagem e, assim, mostrá-la em buscas com termos relacionados ao tema da imagem.

Suponha que você está colocando uma página no ar no endereço http://meusite.com/blog/meu-post.html e que essa página precisa carregar um arquivo CSS que está no endereço http://meusite.com/arquivos/estilo.css. Qual dos endereços abaixo você pode colocar no atributo href da tag <link> dessa página para conseguir carregar o CSS?

/arquivos/estilo.css
 
Assim, colocando /arquivos/estilo.css, o navegador tentará acessar http://meusite.com/arquivos/estilo.css, que é o endereço desejado. Uma alternativa seria colocar ../arquivos/estilo.css.

Suponha novamente que você está colocando uma página no ar no endereço http://meusite.com/blog/meu-post.html. Nessa página, também é necessário que haja um link para https://twitter.com/joaodasilva. Qual dos endereços abaixo você pode colocar no atributo href da tag <a> desse link?

https://twitter.com/joaodasilva
 
Para referenciar outros sites que não o nosso, podemos usar links absolutos (que começam com "http") ou relativos ao protocolo (que começam com "//"), caso o endereço atual e o de destino comecem ambos com "http" ou ambos com "https". Nesse caso, como o endereço do link começa com "https" e o endereço atual começa com "http", a única alternativa restante é usar o link absoluto, ou seja, "https://twitter.com/joaodasilva".

Qual das alternativas abaixo representa melhor a função da tag <nav>?

Indicar que uma determinada região da página contém links para navegar para outras partes do site

Com o seguinte HTML em mãos:
<header>
    <h1>Minha página</h1>
    <p>Página de um desenvolvedor</p>
</header>
<main>
    <h1>Bem vindo</h1>
    <p>Essa é a minha página</p>
    <!-- mais conteúdo -->
</main>
Qual dos seletores abaixo seria mais adequado para estilizar o título do cabeçalho "Minha página"?

header h1

A página de uma padaria tem o seguinte HTML:
<header>
    <h1><a href="/">Padaria do Cabral</a></h1>
    <nav>
        <ul>
            <li><a href="/">Início</a></li>
            <li><a href="/sobre">Sobre</a></li>
            <li><a href="/produtos">Produtos</a></li>
            <li><a href="/contato">Contato</a></li>
        </ul>
    </nav>
</header>
<main>
    <h1>Compre conosco!</h1>
    <ul>
        <li>Pães quentinhos a toda hora!</li>
        <li><a href="/produtos">Produtos exclusivos!</a></li>
        <li>Ingredientes de qualidade</li>
        <li><a href="/sobre">Tradição de mais de 60 anos</a></li>
    </ul>
</main>
E você deseja estilizar os links do menu de navegação. Qual dos seletores abaixo seria o mais adequado?

nav a


############### 4.O navegador trabalha a nosso favor ###############

O navegador trabalhando a nosso favor
Quando estamos desenvolvendo uma página, muito frequentemente fazemos uma alteração no código para tentar chegar a um design final ou simplesmente testar como fica, tentar melhorar o layout ou ver se nosso código funciona. Em todos esses casos, precisamos alterar um arquivo, salvá-lo e, depois, recarregar a página no navegador. Esse é um ciclo que se repete bastante e que pode ser desgastante, sobretudo quando algum ou alguns dos passos não são instantâneos, como quando estamos mexendo em arquivos de outra máquina.

Desenvolver uma página também pode ser bem desgastante quando o comportamento apresentado no navegador não corresponde às nossas expectativas e não conseguimos entender o porquê. Um elemento não aparece na posição desejada ou aparece com as dimensões erradas. Às vezes gastamos horas até encontrar o motivo.

Felizmente, os navegadores mais modernos vêm com ferramentas para nos auxiliar nessas situações. Podemos acessá-las apertando a tecla F12, normalmente. Dentre elas, temos visualização e edição de HTML, CSS e JavaScript, análise do desempenho de rede e inspeção do estado do navegador.

Ferramentas para desenvolvedores no Firefox
Ferramentas para desenvolvedores no Chrome
Ferramentas para desenvolvedores no Internet Explorer
Explorar todas essas ferramentas foge do escopo do curso mas, agora, saber lidar com o Inspetor vai nos ajudar bastante!

Ao abrir a aba do Inspetor, vemos uma região com o código HTML da página aberta no momento e, à direita, temos um painel com código CSS. No painel do HTML, podemos explorar a estrutura da página: o navegador nos mostra quais tags estão dentro de quais. Podemos esconder ou mostrar o conteúdo de uma tag para melhor visualização.

Painel com algumas tags fechadas e outras abertas

Agora, experimente clicar numa tag da página; você verá o painel à direita mudar. Nele, o navegador mostra as regras do CSS que o navegador está aplicando naquele elemento que você clicou.

Painel com uma citação selecionada e CSS correspondente mostrado à direita

No painel com o HTML da página, o navegador não mostra exatamente o código que digitamos, mas sim como ele interpreta o que digitamos. Se esquecermos de fechar uma tag <p>, por exemplo, veremos que o navegador é capaz de "adivinhar" onde ela seria fechada.

O navegador fecha a tag P e mostra isso no inspetor

Por outro lado, se esquecemos de fechar uma tag <em> dentro de um parágrafo, vemos que o navegador fica perdido, e tenta fechá-la e abri-la em diversos lugares.

O navegador fecha e abre a tag EM repetidas vezes

Usando essa ferramenta, somos capazes de identificar erros de digitação mais facilmente, tanto no HTML como no CSS! Se, por exemplo, errarmos a digitação da propriedade width dentro do seletor blockquote, veremos que o navegador, além de não aplicar a largura, vai omitir ou riscar a declaração no painel do CSS.

Propriedade width ignorada no Firefox

Propriedade width ignorada no Chrome

Alterando a página pelo próprio navegador
O Inspetor do navegador permite não apenas visualizar o código mas também alterá-lo. Experimente selecionar a tag <body> e clicar no valor da propriedade background-color. Quando você fizer isso, o navegador permitirá que você altere o valor da propriedade. Digite uma nova cor para o fundo da página, por exemplo #FFA; você verá a página mudar de cor instantaneamente.

Alterando a propriedade background-color no inspetor

Depois de digitar o novo valor, você pode apertar a tecla Enter para o navegador memorizar sua alteração. Assim, você passará à edição da próxima linha do CSS. Note que o navegador não vai alterar seu arquivo original, vai apenas guardar suas alterações temporariamente. Se você recarregar a página (apertando F5, por exemplo), as alterações feitas no Inspetor não estarão mais lá. Assim, essa ferramenta é muito prática para realizar pequenos testes no CSS.

Na edição do CSS, você não está limitado a alterar as propriedades já declaradas; você pode fazer novas declarações. Basta clicar no valor da última propriedade declarada e apertar Enter: o navegador abrirá uma nova linha onde você poderá digitar uma nova propriedade.

Inserindo a propriedade color no body

Também não estamos limitados à edição de CSS. Podemos alterar o código HTML também! Experimente dar um clique duplo na tag <h1>; você poderá trocar o tipo de tag para <h2>, por exemplo.

Título principal alterado para H2

Você também pode remover uma tag da página completamente. Para isso, basta clicar nela com o botão direito e selecionar a opção "Deletar Nó".

Apagando o título principal da página

A edição do código HTML é temporária como a do CSS; se recarregarmos a página, veremos o código como deixamos no arquivo.

O Inspetor é uma ferramenta bem poderosa do navegador. Vale lembrar que é apenas uma das ferramentas que o navegador oferece para facilitar nossas vidas como desenvolvedores.

############### 5.Aprimorando o Layout ###############

Aprimorando o layout
A estrutura da página já está praticamente completa, mas o visual ainda está longe do que queremos.

Layout desejado

Espaçamentos
Um primeiro aspecto do qual precisamos cuidar são os espaços em branco na página. Alguns lugares que deveriam ter espaço não têm e vice-versa.

Espaços indevidos

Felizmente, conseguimos controlar esses espaços com CSS. Mas repare, temos dois tipos de espaços: dentro e fora dos elementos!

Espaço dentro e fora do elemento

O espaço dentro dos elementos é conhecido como padding. Então, se queremos aumentar o tamanho da caixa roxa do título ou, em outras palavras, se queremos mais espaço entre o texto do título e as bordas da caixa, vamos usar a propriedade padding:

h1 {
    padding: 24px;
}
Repare no efeito causado pelo padding: antes, a caixa roxa tinha praticamente o mesmo tamanho do texto; agora, ela ficou maior, com 24 pixels a mais em cima e abaixo do título.

Título sem padding

Título com padding

Com isso, já podemos arrumar também as citações:

blockquote {
    padding: 16px;
}
Podemos arrumar um outro detalhe das citações, também. No layout desejado, temos uma borda mais escura ao redor da caixa.

Borda escura ao redor da citação

Podemos colocar bordas nos elementos com a propriedade border. Mas repare que podemos fazer bordas de vários jeitos: podemos fazer bordas claras e escuras (cor), podemos fazer bordas finas ou grossas (espessura) e podemos fazer bordas de estilos diferentes (tracejadas, pontilhadas etc.). A figura abaixo dá alguns exemplos de bordas possíveis no navegador.

Estilos de borda possíveis

Então, na propriedade border, precisamos passar esses 3 valores que identificamos, na ordem: espessura, estilo e cor. No nosso caso, queremos uma borda com 10 pixels de espessura, sólida (uma linha contínua) e da cor #C2CCCA, um cinza levemente azulado. No código CSS:

blockquote {
    padding: 16px;
    border: 10px solid #C2CCCA;
}
Repare que essas 3 propriedades da borda são separadas por espaço e precisam estar nessa ordem.

Por fim, repare que a citação está um pouco mais para a direita que o texto normal, isto é, há um espaço entre ela e a borda da página. Também há um espaço entre a própria página e as bordas da janela do navegador. Esse espaço entre elementos é o que chamamos no CSS de margin! Então, se quisermos deixar a citação alinhada com o texto, como na figura abaixo, podemos usar essa propriedade.

blockquote {
    padding: 16px;
    margin: 0;
    border: 10px solid #C2CCCA;
}
Citação alinhada com o texto

Essas três propriedades que acabamos de conhecer -- padding, border e margin -- nos permitem controlar como as caixinhas que os elementos formam se comportam. Elas não são as únicas: podemos controlar também a largura com a propriedade width e a altura com a propriedade height. Podemos, por exemplo, definir uma largura menor para as nossas citações:

blockquote {
    padding: 16px;
    margin: 0;
    border: 10px solid #C2CCCA;
    width: 250px;
}
Todas essas regras juntas formam o que chamamos box model ou, em português, "modelo de caixa", do CSS.

Box model

Um fato interessante para notar nesse desenho é que a largura e a altura são referentes ao conteúdo apenas. Ou seja, no nosso exemplo do blockquote, apesar de termos definido a largura como 250 pixels, por ter 16 pixels de padding e 10 pixels de borda, terá, na verdade, 302 pixels.

Citação com 250 pixels de largura ocupando, na verdade, 302 pixels

Então, se você quiser que a caixa tenha realmente 250 pixels de largura, o que você faz? Uma solução é fazer a conta de quanto tem que ser o valor da propriedade width para chegar nesse resultado, neste caso 198 pixels. Ruim, não?

Felizmente, podemos dizer para o navegador mudar esse box model por meio da propriedade box-sizing. Por exemplo, se queremos que a largura seja medida pelas bordas:

blockquote {
    padding: 16px;
    margin: 0;
    border: 10px solid #C2CCCA;
    width: 250px;
    box-sizing: border-box;
}
Fazendo isso, nossa citação terá 250 pixels de largura de verdade. Vale notar que essa propriedade só começou a ser suportada recentemente pelos navegadores, então você pode ter alguns problemas ao tentar usá-la. Discutimos sobre as propriedades mais recentes do CSS no curso avançado de HTML e CSS.

Agora, repare como o CSS é poderoso: conseguimos controlar praticamente todos os aspectos da exibição da nossa página, inclusive alguns mais abstratos, como o box model.

Se quisermos centralizar o conteúdo da seção de navegação (que contém links para outras páginas do site), mantendo-a com a mesma largura que temos agora (página inteira), qual das opções abaixo devemos usar? Aplique essa mudança no seu projeto.

text-align: center no aside

Aplique uma largura de 250 pixels para os elementos <blockquote> da página bio.html. Em seguida, aplique a propriedade box-sizing com o valor border-box nesses. O que acontece? Por quê?

Quando aplicamos o valor border-box para a propriedade box-sizing nos elementos <blockquote>, vemos que o tamanho deles aparentemente diminui. Isso acontece porque estamos mudando a forma como o navegador mede a largura dos elementos.
Por padrão, o navegador mede a largura ignorando padding e bordas. No momento em que colocamos border-box, dizemos ao navegador que ele deve considerar padding e bordas nesse cálculo. Então o elemento diminui pois agora os 250 pixels que definimos de largura incluem os paddings e bordas do elemento.

É possível fazer desenhos e formas bem interessantes apenas usando CSS. Por exemplo, o símbolo universal de pausar (duas barras verticais) pode ser feito com um elemento <div> vazio (ou qualquer outro elemento como <p> ou <header>) com duas bordas grossas, uma à esquerda e outra à direita, e um espaço entre elas, que pode ser a largura do elemento:
div {
    border-left: 10px solid red;
    border-right: 10px solid red;
    width: 5px;
    height: 30px;
}
Também é possível desenhar um triângulo apenas usando CSS e bordas. Basta fazer a borda inferior ter uma cor e as bordas vizinhas serem transparentes; a mudança de cor entre as bordas ocorre nas diagonais do elemento, então a borda inferior vai ficar com a aparência de um triângulo, desde que o elemento tenha zero pixels de largura (senão vai parecer um trapézio):

div {
    border-bottom: 30px solid red;
    border-left: 30px solid transparent;
    border-right: 30px solid transparent;
    width: 0;
}
Tente fazer um elemento que se parece com uma gravata borboleta e um que seja um triângulo com um ângulo reto.

O código para a gravata borboleta deve ficar parecido com:
div {
    border-left: 30px solid red;
    border-bottom: 30px solid transparent;
    border-top: 30px solid transparent;
    border-right: 30px solid red;
    width: 0;
}
Basta usar o código do triângulo como base e adicionar uma borda oposta à borda colorida que já tínhamos antes.

O código para o triângulo reto deve ficar parecido com:

div {
    border-left: 30px solid red;
    border-bottom: 30px solid red;
    border-top: 30px solid transparent;
    border-right: 30px solid transparent;
    width: 0;
}
Também usando o triângulo do enunciado como base, basta mudar uma das bordas laterais para que tenha a mesma cor da borda inferior.

É possível desenhar bordas com cores diferentes. Em nossos elementos <blockquote>, por exemplo, que já têm um tamanho e um estilo de borda definidos, podemos mudar as cores individualmente:
blockquote {
    border: 10px solid #C2CCCA;
    border-bottom-color: #333;
    border-right-color: #FFF;
}
Experimente fazer essas alterações. Onde, no elemento, ocorre a mudança de cor entre a borda inferior e a borda da direita? E o que acontece se usarmos a cor transparent na borda?

Quando as bordas têm cores diferentes, o navegador realiza a mudança de cor na diagonal em que as bordas se encontram.
Se deixamos uma borda com a cor transparent, ela é desenhada com a cor de fundo do elemento. Ou, em outras palavras, a borda ocupa espaço, mas fica invisível.

padding - A propriedade padding controla o espaço entre o conteúdo de um elemento e sua borda.
width - As propriedades width e height controlam apenas o tamanho de um elemento, e não afetam o espaçamento entre esse elemento e seus vizinhos.
line-height - A propriedade line-height controla apenas a altura entre as linhas de texto da página, não afetando a distância entre elementos.
box-sizing - A propriedade box-sizing controla apenas como a largura e a altura de um elemento deve ser calculada.
height - As propriedades width e height controlam apenas o tamanho de um elemento, e não afetam o espaçamento entre esse elemento e seus vizinhos.

Qual das propriedades abaixo controla o espaço entre elementos?

margin

############### 6.Construindo uma base sólida ###############

Construindo uma base sólida
Antes de começarmos a fazer os ajustes nos outros espaçamentos, repare em uma coisa: definimos os tamanhos das fontes dos títulos e subtítulos? Há espaço entre os parágrafos de texto e entre o título e as bordas da janela; fomos nós que colocamos esses espaços?

Desde a primeira aula, quando fizemos apenas o HTML, a página já tinha alguns estilos, mesmo sem termos escrito nenhum CSS.

Layout ao final da primeira aula

Ou seja, o navegador já dá um estilo padrão para nossas páginas. E qual o problema disso? O problema é que nem sempre queremos esse estilo padrão. E mais: como é um estilo do navegador, cada navegador pode fazer o seu próprio estilo, como vimos anteriormente com as fontes.

Fonte no Firefox

Fonte no Chrome

Nosso site precisa funcionar bem em todos os navegadores, então usar como base para o nosso CSS o estilo padrão do navegador não é uma boa ideia.

Porém, nada impede de sobrescrevermos o estilo padrão do navegador, como já fizemos com as fontes! No caso dos espaçamentos, vimos que podemos mexer no espaço entre eles com a propriedade margin e no espaço dentro deles com a propriedade padding. Então, se quisermos tirar o espaço que o navegador coloca entre nossos parágrafos, podemos escrever no nosso CSS:

p {
    margin: 0;
}
Podemos, também, querer tirar os tamanhos de fonte que o navegador coloca para os títulos e subtítulos:

h1, h2 {
    font-size: 100%; /* 100% = tamanho original da fonte do navegador */
}
Esses são apenas alguns exemplos. Na prática, precisamos sobrescrever várias regras que o navegador coloca por padrão, mesmo nos navegadores mais modernos, o que dá um bom trabalho. Para poder reaproveitar esse trabalho entre os nossos projetos, podemos até colocar essa sobrescrita num arquivo CSS separado, só para ele. Felizmente, vários desenvolvedores já tiveram essa ideia e disponibilizaram seus arquivos para que pudéssemos usar nos nossos próprios projetos.

Esse tipo de arquivo até ganhou um nome: reset. Atualmente, existem alguns disponíveis, com algumas diferenças entre eles. Alguns dos mais populares são:

Eric Meyer: arquivo bem pequeno; deixa todos os elementos com mesma aparência e tamanho de fonte; usa a fonte padrão do navegador
Normalize: arquivo um pouco maior, mas com ajustes mais finos; já define fontes e tamanhos padrão para alguns elementos; corrige diversas inconsistências entre navegadores
YUI (Yahoo!): arquivo bem pequeno, com um efeito bem parecido com o do Eric Meyer, mas com alguns ajustes mais específicos
No nosso projeto, vamos usar o reset do Eric Meyer, mas você pode usar qual você achar melhor. O importante é usar um para ter uma base sólida para desenvolver seu layout, independente de navegador.

Como o reset é só mais um arquivo CSS no projeto, para usá-lo, basta baixar o arquivo e importá-lo como já fizemos com o nosso próprio CSS:

<link rel="stylesheet" href="reset.css">
Podemos, sim, ter vários arquivos CSS para uma única página HTML. Mas onde colocamos essa tag? No <head>? Antes ou depois do nosso CSS? Veja só: no reset, teremos uma regra do tipo

h1, h2, h3, h4, h5, h6 {
    font-size: 100%;
}
Já no nosso arquivo, vamos querer fazer algo do tipo

h1 {
    font-size: 30px;
}
Qual dessas duas regras o navegador deve usar? A ordem em que colocamos as tags <link> é importante. O navegador lê as regras sequencialmente e, se houver conflito entre regras, pega a última declaração. Ou seja, no exemplo acima, o navegador vai usar o tamanho de fonte 30px.

Então, se queremos usar o reset como base para o nosso CSS, devemos importá-lo antes do nosso CSS na página:

<head>
    <link rel="stylesheet" href="reset.css">
    <link rel="stylesheet" href="bio.css">
</head>
Um pouco mais sobre conflitos no CSS
Acabamos de ver que, quando duas declarações conflitam no CSS, o navegador usa aquela que for declarada por último. Agora, o que será que acontece na seguinte situação?

h1 {
    font-size: 100%;
    color: red;
}

h1 {
    font-size: 30px;
    font-weight: bold;
}
Para entender como o navegador entende as declarações acima, precisamos entender que o conflito acontece no elemento onde o estilo vai ser aplicado. No exemplo acima, o estilo vai ser aplicado nos <h1>. Então o navegador vai fazer o seguinte:

Aplicar o font-size: 100%
Aplicar o color: red
Aplicar o font-size: 30px, sobrescrevendo o font-size: 100% anterior
Aplicar o font-weight: bold
Ou seja, o navegador vai simplesmente aplicando todas as regras que ele encontrar para um elemento. Se ele já mexeu numa propriedade (como o font-size no exemplo), não tem problema: ele mexe de novo.

A figura muda um pouco quando somos mais específicos na hora de selecionar um elemento. Imagine que agora temos o seguinte cenário: no HTML temos

<main>
    <h1>Título principal</h1>
</main>
E, no CSS, temos

main h1 {
    font-size: 30px;
    color: red;
}

h1 {
    font-size: 20px;
    font-weight: bold;
}
Quando selecionamos elementos por hierarquia, estamos sendo mais específicos do que quando selecionamos apenas pela tag. Nesse caso, o navegador começa a aplicação dos estilos partindo das regras declaradas em seletores menos específicos. Ou seja:

Aplica o font-size: 20px do seletor h1
Aplica o font-weight: bold do seletor h1
Aplica o font-size: 30px do seletor main h1, sobrescrevendo o font-size: 20px
Aplica o color: red do seletor main h1
Então não apenas a ordem no CSS importa, mas também a especificidade dos seletores que usamos. Existem várias regras para definir a especificidade de um seletor e não vale a pena entrar em detalhes aqui. O importante é saber que, quando selecionamos um elemento, ser muito ou pouco específico pode atrapalhar no desenvolvimento do projeto: podemos ser específicos demais e não conseguirmos reaproveitar código ou podemos ser específicos de menos e acabar aplicando estilos em lugares que não gostaríamos.

O que ganhamos ao usar um reset nos nossos sites?

Devemos usar um reset nos nossos projetos para eliminar diferenças de layout entre navegadores e bugs específicos de alguns navegadores. Com isso, ganhamos uma base sólida para desenvolvermos nosso site. Ou seja, todas as alternativas listam benefícios de se usar um reset.

No momento, estamos usando o reset do Eric Meyer, mas existem várias alternativas. Uma também bastante famosa é o Normalize, criado por Nicolas Gallagher e Jonathan Neal.

############### 7.Um pouquinho de posicionamento ###############

Um pouquinho de posicionamento
Na barra lateral, ainda estão faltando os ícones que servirão de links para os nossos perfis nas redes sociais.

Ícones na barra lateral

Podemos representar esses ícones como uma lista de links dentro do nosso <aside>. Dentro de cada tag <a>, podemos colocar, em vez de texto, a imagem com o logotipo da rede social:

<ul>
    <li>
        <a href="https://github.com/joaodasilva">
            <img src="github.png" alt="Github">
        </a>
    </li>
    <li>
        <a href="https://twitter.com/joaodasilva">
            <img src="twitter.png" alt="Twitter">
        </a>
    </li>
    <li>
        <a href="https://br.linkedin.com/pub/joão-da-silva/32/4/508">
            <img src="linkedin.png" alt="LinkedIn">
        </a>
    </li>
</ul>
Isso já nos dá um resultado próximo do esperado: as imagens aparecem, são clicáveis mas ainda estão uma em cima da outra. Por que isso acontece e como resolver isso?

Imagens das redes sociais na vertical

Se olharmos nosso layout atual e compararmos com o nosso HTML, veremos que, de modo geral, as tags que criamos – <p>, <header>, <aside>, <footer> – ficam uma embaixo da outra. Ou seja, esse é o comportamento padrão do navegador: empilhar as tags como caixas, uma em cima da outra.

Tags empilhadas no layout

Mas nem toda tag tem esse comportamento. Repare, por exemplo, nas tags <a>, <strong> e <em>. Elas ficam no meio do texto, não empilhadas.

Tags no meio do texto no layout

Então, na verdade, temos esses dois comportamentos possíveis: empilhar ou ficar no meio do texto. Ou, em outras palavras, temos tags que são block, que empilham, e tags que são inline, que ficam no meio do texto.

No caso da nossa lista de ícones, as tags <li> têm o comportamento de empilhar, são block, por isso os ícones aparecem um abaixo do outro. Se as removermos, deixando apenas os links com as imagens, conseguiremos o resultado desejado. Mas será que faz sentido mexer no HTML por uma questão visual? Faz sentido alterar a semântica da nossa página por isso?

Como é uma questão visual, devemos resolver usando a linguagem responsável por esse aspecto da nossa página: a linguagem CSS. No CSS, conseguimos controlar esse aspecto de um elemento por meio da propriedade display. Se quisermos fazer com que os <strong> tenham comportamento block, podemos escrever no CSS:

strong {
    display: block;
}
Resultado do display: block na tag strong: quebra linha

No nosso caso, como queremos deixar os ícones das redes sociais em linha, como se fossem texto, podemos mudar o comportamento padrão do <li>, tornando-o inline:

li {
    display: inline;
}
Com isso, conseguimos o efeito desejado. Ou quase; aparecem uns sublinhados estranhos do lado das imagens:

Ícones em linha, mas com sublinhados estranhos

Se olharmos como o navegador "enxerga" nossos elementos, veremos que há algo estranho: os itens da lista estão menores que as imagens dentro deles:

Inspetor mostrando tamanho dos li's

O problema é que não podemos mudar a altura de um elemento inline, e é isso que a imagem tenta fazer com o <li>. O elemento inline sempre terá a altura da fonte. Ou seja, se quisermos que a imagem fique dentro do <li>, precisamos definir um font-size para ele igual à altura da imagem. Isso não é muito prático e, ainda por cima, não resolve o problema do sublinhado.

O que precisávamos, nesse caso, é que o <li> tivesse a altura e a largura correta automaticamente sem perder o comportamento do inline, de ficar em linha. Para resolver esse cenário, temos o inline-block, mais um valor da propriedade display. Usando-o nos <li>, conseguimos o resultado que queríamos.

Resultado final conforme desejado

Acabamos alterando o layout do menu logo acima das redes sociais, também. Resolveremos esse problema na próxima aula.

Qual a diferença entre elementos inline e inline-block?

Elementos inline não podem ter altura definida
 
O valor inline-block para a propriedade display surgiu para podermos definir altura e largura em elementos inline. Fora isso, ambos os elementos podem ter um padding definido, ambos ficam em linha e ambos são suportados por todos os navegadores modernos.

Vimos nesta aula os valores inline, block e inline-block para a propriedade display. Esses são apenas alguns valores possíveis para essa propriedade.
Experimente o valor none. O que ele faz?

O valor none faz com que um elemento desapareça completamente da página. É como se ele não existisse na página. É um valor muito útil para quando queremos esconder e mostrar informações interativamente, com uma passada de mouse do usuário por exemplo.

Você tem um menu vertical que gostaria que ficasse lado a lado com o logotipo da sua empresa, no topo da página:
Logotipo com menu vertical ao lado

Uma marcação HTML válida para esse cenário seria

<header>
    <img src="logo.png" alt="Minha empresa">
    <nav>
        <ul>
            <li><a href="/sobre">Sobre</a></li>
            <li><a href="/produtos">Produtos</a></li>
            <li><a href="/consultoria">Consultoria</a></li>
            <li><a href="/contato">Contato</a></li>
        </ul>
    </nav>
</header>
Para deixar imagem e menu lado a lado, qual o valor da propriedade display que devemos dar a cada um deles?

inline-block em ambos
 
Queremos definir tamanhos para ambos, então ambos precisam ser inline-block. Além disso, o <nav> contém elementos do tipo block (cada um dos <li>). Assim, para um comportamento correto do <nav>, é necessário usar o valor inline-block nele.

############### 8.Mais seletores ###############

Mais seletores
Na aula passada, vimos como deixar os ícones das redes sociais lado a lado usando a propriedade display:

li {
    display: inline-block;
}
Mas acabamos alterando também o estilo do menu logo acima desses ícones:

Menu e ícones na horizontal

Por que isso aconteceu e como resolver? Vamos analisar o seletor: li. Quais elementos da página estamos selecionando? Todos os <li>, estejam eles no <aside>, no <header>, no <footer> ou em qualquer outro lugar da página.

LIs selecionados

Mesmo se tentarmos usar o seletor de descendente – o espaço – não conseguiremos selecionar apenas os <li> das redes sociais. O código abaixo seleciona todos os <li> dentro de <aside>, estando eles dentro do <nav> ou não.

aside li {
    display: inline-block;
}
Precisamos, então, de uma forma mais poderosa de selecionar elementos, que não seja apenas pelas tags HTML. Se pudermos, de alguma forma, dar um nome para a lista dos ícones das redes sociais, conseguimos fazer algo do tipo:

icones-sociais li {
    display: inline-block;
}
Assim, selecionamos os <li> somente dentro dessa lista. Para isso, temos o atributo id do HTML:

<ul id="icones-sociais">
    <!-- LIs continuam idênticos aqui dentro -->
</ul>
Qualquer elemento pode ter um id e, com ele, podemos selecioná-lo facilmente no CSS: basta usar, no lugar da tag, o próprio id, precedido por cerquilha (#):

#icones-sociais {
    /* estilo exclusivo da lista de ícones */
}
Então, para pegar os <li> dentro dessa lista específica, basta combinar o seletor de id com o seletor de descendência:

#icones-sociais li {
    display: inline-block;
}
Fazendo essas alterações, conseguimos deixar apenas os ícones das redes sociais na horizontal.

Menu na vertical e ícones na horizontal

Pensando no futuro
O seletor de id já resolve nosso problema agora. Mas imagine que precisamos colocar os ícones das redes sociais no rodapé, também. Podemos repetir o HTML?

<aside>
    <nav>
        <!-- links -->
    </nav>
    <ul id="icones-sociais">
        <!-- icones -->
    </ul>
</aside>
<footer>
    &copy; João da Silva 2014
    <ul id="icones-sociais">
        <!-- icones -->
    </ul>
</footer>
Como o id é um identificador, um nome para um elemento, ele não pode se repetir na página. Quer dizer, se repetirmos um id na página, o CSS e o JavaScript podem deixar de funcionar corretamente. Poderíamos dar um outro nome id para os ícones do rodapé, mas isso nos obrigaria a colocar esse outro nome no CSS também, o que geraria mais código desnecessariamente.

Quando criamos uma página, frequentemente temos um componente visual que se repete, como as citações no nosso caso.

Citações com mesma aparência

No caso das citações, podemos agrupá-las todas pois todas usam a tag <blockquote>. Agora, no caso dos ícones das redes sociais, usamos a tag <ul>, que também é usada em outros contextos. Precisamos, então, de uma forma de agrupar componentes da página sem ser pela tag. É aí que entra o atributo class do HTML.

Enquanto o id não pode ser repetido, o class é feito para ser repetido. Podemos sem nenhum problema usá-lo para agrupar os ícones das redes sociais no <aside> e no <footer>:

<aside>
    <nav>
        <!-- links -->
    </nav>
    <ul class="icones-sociais">
        <!-- icones -->
    </ul>
</aside>
<footer>
    &copy; João da Silva 2014
    <ul class="icones-sociais">
        <!-- icones -->
    </ul>
</footer>
No CSS, podemos selecionar elementos pelo atributo class usando a classe precedida por um ponto (.):

.icones-sociais li {
    display: inline-block;
}
É difícil dizermos que um determinado componente visual nunca será repetido. Por isso, mesmo quando queremos identificar um componente único na página para estilizá-lo, é recomendável usar classes para essa estilização.

Na página blog.html, temos um problema atualmente: como estamos aplicando um estilo ao <footer> e usamos a mesma tag no restante do post e para o rodapé da página. As tags acabaram ficando com fundo preto, mas nós não queremos isso!
Qual seria a melhor maneira para aplicar o fundo apenas no rodapé da página?

Colocar uma classe no rodapé da página e aplicar o estilo apenas nela

No HTML, podemos dar mais de uma classe para um elemento: basta separar os nomes das classes por espaços.
<header class="pagina-inicial cabecalho-principal">
O que acontece, então, se, no CSS, tivermos as seguintes declarações?

.pagina-inicial {
    font-size: 60px;
}

.cabecalho-principal {
    color: white;
    background-color: purple;
}

O navegador aplica os estilos de ambas as classes

Podemos agora, no nosso código, ter seletores diferentes para o mesmo elemento. Por exemplo, o elemento <div class="texto"> pode ser selecionado tanto pelo seletor div como pelo seletor .texto. Isso pode levar a alguns conflitos. Por exemplo:
div {
    color: red;
}

.texto {
    color: black;
}
Quando acontece um conflito desse tipo, o navegador escolhe o estilo declarado no seletor mais específico. No exemplo acima, o texto aparecerá preto, pois selecionar por uma classe é mais específico que selecionar por uma tag.

Sendo assim, qual será o estilo final do elemento <div class="principal centralizado"> no exemplo abaixo?

div {
    border: 1px solid blue;
    color: orange;
}

.principal {
    background-color: red;
    color: white;
}

.centralizado {
    width: 700px;
    margin: 0 auto;
}

borda azul, fundo vermelho, texto branco, centralizado com 700px de largura
 
Muito bem !! Como explicado no enunciado, o navegador escolhe o estilo dos seletores mais específicos quando há conflito. Se não há conflito entre o estilo definido em dois seletores diferentes, ou seja, se a mesma propriedade não tem valores diferentes em cada seletor, tanto propriedades do seletor menos específico como do mais específico serão utilizadas.
No exemplo dado, a única propriedade que aparece em dois seletores diferentes é a propriedade color. Para ela, o navegador usará o valor declarado no seletor mais específico, no caso a classe; ou seja, o texto será branco.
As outras propriedades não apresentam conflito entre si. Sendo assim, o navegador aplicará todas elas. O resultado final, então, é um elemento com borda azul, fundo vermelho, texto branco e centralizado com 700 pixels de largura.

centralizado é um bom nome para uma classe? Por quê?

Não, pois é ligada à aparência do elemento
 
Esse não é um bom nome para uma classe, pois remete à posição do elemento na tela. Se o elemento deixar de ser centralizado, esse nome de classe não faz mais sentido.

Além de selecionar por classes, vimos como selecionar elementos pelo id deles. Vimos que não é uma boa ideia usar id para estilizar pois o estilo definido dessa forma não é reaproveitável. Mas existe um outro problema com o id. Se tivermos um elemento <div id="mensagem" class="centralizado"> e o seguinte CSS:
#mensagem {
    margin: 0;
    height: 200px;
}

.centralizado {
    width: 700px;
    margin: 0 auto;
}

div {
    width: 350px;
    height: 100px;
}
Que estilo terá o elemento?

Dica: lembre da questão da especificidade.

200px de altura, 700px de largura e não centralizado
 
O seletor de id é muito mais específico que o seletor de classe ou de tag. Por isso, o estilo dele prevalece. Sendo assim, o elemento aparecerá com 200 pixels de altura e não centralizado.
O segundo mais específico no exemplo é o seletor de classe. Ele define a largura de 700 pixels, mas não define a margem automática, pois prevalece a margem definida no id.
Por fim, o seletor de tag, que define altura e largura, tem suas declarações sobrescritas pelos seletores de id e classe.
Então o estilo final do elemento é 700 pixels de largura, 200 pixels de altura e não centralizado.

Como podemos colocar mais de uma classe em um elemento, é possível que haja conflito entre regras declaradas nas duas classes. Por exemplo:
<div class="destaque titulo-principal">

.destaque {
    font-size: 40px;
    color: red;
}
.titulo-principal {
    background-color: purple;
    color: white;
}
Se fizermos um elemento com ambas as classes, o navegador precisa decidir quais propriedades de cada classe usar! O critério de desempate é qual das classes aparece por último no arquivo CSS. Então, no exemplo acima, o elemento com as duas classes terá a fonte com 40 pixels, o fundo roxo e o texto branco.

O mesmo vale para quaisquer seletores empatados. Se tivermos:

div {
    background-color: red;
}
div {
    background-color: blue;
}
Todos os elementos <div> terão fundo azul.

Com isso em mente, qual o estilo do elemento <p class="importante primeiro"> com o CSS abaixo?

.primeiro {
    font-size: 40px;
    text-align: center;
}
.importante {
    font-size: 30px;
    font-weight: bold;
}
p {
    font-size: 16px;
    text-align: left;
}

Fonte de 30 pixels, negrita, texto centralizado


############### 9.Nem tudo é o que parece ###############

Nem tudo é o que parece
Como já discutimos antes, quando desenvolvemos uma página, precisamos levar sempre em conta não só a aparência dos elementos da página, mas também o que eles significam, ou seja, a semântica deles.

Quando começamos a levá-la em conta, percebemos que nem sempre o mapeamento entre a aparência de um elemento e o HTML é direto. Considere, por exemplo, o título da página. Atualmente, ele está assim: com letras maiúsculas e minúsculas.

Imagem do título da página: sobre mim

Porém, se olharmos no layout original, aquele que queremos implementar, o título é feito apenas de letras maiúsculas:

Imagem do título com letras maiúsculas

A primeira solução que podemos pensar é mudar o HTML para deixar o texto com letras maiúsculas:

<h1>SOBRE MIM</h1>
Para quem entende português, o significado não muda, pois ainda é possível identificar as palavras "sobre" e "mim". Mas, para alguém que não entende português, o que é isso? Quando usamos apenas letras maiúsculas, não estamos escrevendo uma palavra, mas sim uma sigla. Então, quem não entende português vai achar que isso é uma sigla.

Dentre aqueles que não entendem português, podemos citar, além das pessoas que não falam português, as máquinas. Isto é, programas como os leitores de tela e as ferramentas de busca não entendem o que nosso texto quer dizer. Isso significa, então, que os programas leitores de tela e as ferramentas de busca não entendem o que nossa página significa; para eles, tudo são apenas símbolos.

Então como podemos fazer para manter o significado original, de palavra, e deixar o visual com letras maiúsculas? A própria pergunta já traz a resposta: o HTML é onde definimos o significado e o CSS é onde definimos a aparência. Então, no HTML, mantemos o texto com palavras:

<h1>Sobre mim</h1>
E, no CSS, mudamos a aparência do texto usando a propriedade text-transform, dizendo que queremos que esse texto seja exibido com letras maiúsculas:

h1 {
    text-transform: uppercase;
}
Nem toda imagem é uma imagem
Anteriormente, colocamos os ícones das redes sociais na barra lateral usando uma lista para representá-las. Conseguimos o resultado esperado, mas será que a semântica está correta?

Quando pensamos em colocar imagens na página, a primeira ideia que vem à mente é colocar uma tag <img>. Porém, precisamos pensar, como sempre, na sêmantica. Por que essas imagens estão lá? Elas estão lá para representar uma informação visual? Ou estão lá apenas para representar visualmente o nome de uma rede social? Se estão lá apenas porque representam visualmente o nome da rede social correspondente, deveríamos deixar o lado visual para o CSS, e deixar no HTML o nome da rede social, que é o que queremos passar de significado. Ou seja, nosso HTML ficaria assim:

<ul class="icones-sociais">
    <li>
        <a href="https://github.com/joaodasilva">
            Github
        </a>
    </li>
    <li>
        <a href="https://twitter.com/joaodasilva">
            Twitter
        </a>
    </li>
    <li>
        <a href="https://br.linkedin.com/pub/joão-da-silva/32/4/508">
            LinkedIn
        </a>
    </li>
</ul>
Agora, precisamos fazer a imagem aparecer via CSS e, além disso, fazer o texto sumir. Colocar a imagem via CSS é possível graças à propriedade background-image.

.icones-sociais a {
    background-image: url(github.png);
}
Fazendo isso, veremos a imagem do Github atrás do texto dos links.

Logo do Github cortado atrás dos textos dos links

Repare que o logo do Github está cortado. Precisamos, então, definir um tamanho para o link, de modo que a imagem inteira apareça no fundo do elemento. Para isso, usamos as propriedades width e height. Porém, para que essas propriedades funcionem com nossos links, é necessário que eles tenham um display que seja inline-block ou block. Vamos usar o valor block, mas poderia ser inline-block também.

.icones-sociais a {
    background-image: url(github.png);
    width: 40px;
    height: 40px;
    display: block;
}
Com isso, já conseguimos ver a imagem inteira, mas o texto continua em cima dela.

Logo do Github completo, mas atrás do texto

Como remover o texto? No CSS, existe a propriedade text-indent, que permite regular o recuo da primeira linha de um parágrafo.

Efeito da propriedade text-indent

Quando colocamos um tamanho maior que zero para essa propriedade, a primeira linha começa um pouco depois das linhas seguintes. Se colocamos um tamanho menor que zero, a primeira linha começa um pouco antes.

text-indent positivo e negativo

Se aumentamos muito o valor do text-indent, o texto pode começar fora da página.

text-indent muito grande joga o texto para fora da página

Mas, se o texto tiver mais de uma palavra, apenas a primeira palavra ficará para fora da página. Então podemos tentar com um tamanho bem menor que zero. No nosso caso, nosso CSS vai ficar parecido com:

.icones-redes-sociais a {
    background-image: url(github.png);
    width: 40px;
    height: 40px;
    display: block;
    text-indent: -99999px;
}
Com isso, conseguimos o efeito desejado.

Logotipo do Github sem o texto por cima

Conseguimos, assim, substituir um texto do HTML por uma imagem carregada via CSS. Essa é uma prática comum, tão comum que até tem um nome popular: image replacement.

Só falta arrumar um problema: todos os links estão com a imagem do Github. Isso acontece porque, no CSS, estamos selecionando todos os links de uma vez. Para selecionar cada link de uma vez, podemos colocar uma classe para cada um:

<ul class="icones-sociais">
    <li>
        <a href="https://github.com/joaodasilva" class="github">
            Github
        </a>
    </li>
    <li>
        <a href="https://twitter.com/joaodasilva" class="twitter">
            Twitter
        </a>
    </li>
    <li>
        <a href="https://br.linkedin.com/pub/joão-da-silva/32/4/508" class="linkedin">
            LinkedIn
        </a>
    </li>
</ul>
No CSS, podemos manter boa parte das regras no seletor .icones-sociais a. Apenas a imagem de fundo muda, então apenas essa declaração precisa ficar na classe específica do link:

.icones-sociais a {
    width: 40px;
    height: 40px;
    display: block;
    text-indent: -99999px;
}

.github {
    background-image: url(github.png);
}

.twitter {
     background-image: url(twitter.png);
}

.linkedin {
    background-image: url(linkedin.png);
}

Ferramentas de busca, ao examinarem nossos sites, levam em conta apenas o HTML. Que implicações isso traz quando usamos a técnica image replacement?

Por não examinarem o CSS, as ferramentas de busca não encontrarão e, portanto, não indexarão as imagens referenciadas no CSS. Isso pode ser ou não interessante. Se usamos corretamente a técnica image replacement, apenas imagens secundárias, supérfluas para o conteúdo, serão ignoradas; as imagens mais importantes ficam no HTML e, portanto, são indexadas.

Em sites que usam um logotipo, como o exemplo do cabeçalho da "Minha Empresa":
Cabeçalho do site da empresa fictícia

Esse logotipo deve ou não ser inserido usando a técnica image replacement?

Não deve, pois o logotipo da empresa é um conteúdo importante e queremos que as ferramentas de busca tenham acesso a ele

Fizemos o image replacement usando, entre outras, a propriedade text-indent com um valor negativo bem grande. Contudo, essa é apenas uma forma possível de aplicar essa técnica.
Experimente, por exemplo, trocar a declaração text-indent: -9999px por font-size: 0. Funciona também, não?

Então qual desses métodos usar? Discuta vantagens e desvantagens que você enxerga em cada método.

A propriedade text-indent tem um comportamento que depende da língua usada na página. Em algumas línguas, como o árabe, escrevemos da direita para a esquerda. Então, se nossa página está escrita nessa direção, o text-indent tem seu comportamento invertido: um valor positivo joga o texto para a esquerda e, por outro lado, um valor negativo joga o texto para a direita. Assim, se usamos um text-indent bem negativo e sua página está escrita nessa direção, o texto do elemento com image replacement ficará bastante para a direita e, portanto, fará aparecer no navegador uma barra de rolagem horizontal.
Um outro problema com o valor muito grande e negativo da propriedade text-indent é que esse valor muito grande pode fazer com que o navegador gaste muita memória para exibir a página, pois agora ele precisa levar em consideração um elemento muito grande nos cálculos para a exibição da página.

Por outro lado, usar o font-size com valor zero não é bem interpretado por todos os navegadores. Alguns simplesmente ignoram uma declaração desse tipo; outros, mesmo com o tamanho zerado, mostram o texto numa fonte pequena. Ou seja, há um problema de compatibilidade com essa técnica, que a propriedade text-indent não tem.

############### 10.Posicionanmento mais a fundo ###############

Posicionamento mais a fundo
Nossa página está quase pronta. Resta apenas colocar a barra lateral, a foto e as citações nos seus devidos lugares.

Página no estado atual

Resultado desejado

Vamos começar pelas citações. Repare que, no final, cada uma deve ficar de um lado do texto. Vimos que a propriedade display permite colocar um elemento ao lado do outro. Porém, ela não permite mudar a ordem de exibição dos elementos: o que vem primeiro no HTML, vem primeiro no visual.

Para conseguirmos o resultado desejado, precisamos "quebrar" essa relação de ordem entre o HTML e o visual final, que podemos chamar de fluxo do documento.

Uma das propriedades que nos permite fazer essa "quebra" é a propriedade float. Há dois valores possíveis para ela (além do none, que é o padrão): left e right. Quando colocamos float: left na citação, a caixa da citação permanece no mesmo lugar, mas o texto, que estava abaixo, passa a ficar ao lado da citação, como se tivéssemos definido tanto a citação como o texto como elementos inline.

Citação com float: left

Mas repare que não é exatamente o mesmo comportamento de um elemento inline: o subtítulo seguinte, depois do parágrafo, também vai parar do lado da citação! O que aconteceu, na verdade, é que o resto do conteúdo da página "subiu", e a citação ficou flutuando do lado esquerdo do conteúdo.

Se usarmos o valor right, veremos que a citação permanece na mesma altura do fluxo, mas do lado direito do conteúdo.

Citação com float: right

É importante notar que os elementos flutuados permanecem na mesma altura de antes. Isso nos permite prever qual comportamento teremos ao usar a propriedade.

Elemento flutuado permanece na mesma altura do fluxo de antes

Para conseguir o resultado desejado no layout final, com cada citação de um lado, precisamos ser capazes de selecionar apenas uma delas individualmente. Para isso, podemos usar um id para cada uma delas mas, como vimos nas aulas anteriores, o ideal é sempre usar classes. Então podemos colocar mais uma classe nas citações:

<h2>Como trabalho</h2>
<blockquote class="citacao-bio fiat">
    <p>João é o melhor...</p>
    <cite>José Souza, Fiat</cite>
</blockquote>
<!-- ... -->
<h2>Experiência</h2>
<blockquote class="citacao-bio petrobras">
    <p>João domina as tecnologias...</p>
    <cite>Manoel Santos, Petrobrás</cite>
</blockquote>
Agora, nas classes recém-criadas, colocamos a declaração da propriedade float:

.fiat {
    float: right;
}

.petrobras {
    float: left;
}
E temos quase o resultado esperado.

Citações flutuando à esquerda e à direita

Repare que os subtítulos também acabam ficando do lado das citações; não queremos isso. Felizmente, podemos controlar o fluxo do documento com relação aos floats da página. Para isso, usamos a propriedade clear, que permite dizer que não queremos floats do lado de um determinado elemento. Por exemplo, se não queremos floats à esquerda dos nossos subtítulos, podemos fazer:

h2 {
    clear: left;
}
Comunidade com clear:left

Repare que o subtítulo "Comunidade" é "empurrado" para baixo, para não ficar ao lado da citação com float: left. Mas o subtítulo "Experiência" continua ao lado da citação com float: right. Então, na verdade, queremos que não haja floats em nenhum dos lados dos <h2>. Para isso, usamos o valor both na propriedade clear:

h2 {
    clear: both;
}
Assim, chegamos no resultado esperado, bastando apenas alguns pequenos ajustes nas margens das citações para que elas fiquem alinhadas com o texto.

Subtítulos com clear:both

Floats e mais floats
Podemos aproveitar a ideia de floats para posicionar a foto e a barra lateral também. Para entender como isso é possível, precisamos entender o que acontece quando temos vários floats seguidos no HTML.

Como o float faz com que o elemento saia do fluxo, o resto do conteúdo da página sobe. Assim, se outro float vem logo em seguida no fluxo, esse outro float acabará na mesma altura do primeiro float, independente do lado em que ele vai ficar.

Floats seguidos sendo aplicados pelo navegador

Agora, e se esse segundo float tem a propriedade clear definida justamente com o lado em que o primeiro float está?

.primeiro {
    float: left;
}

.segundo {
    float: left;
    clear: left;
}
Neste caso, o segundo float será "empurrado" para baixo, da mesma forma que qualquer outro conteúdo. Porém, o conteúdo sem float continuará ao lado dos dois floats.

Floats com clear no segundo e conteúdo ao lado

Se olharmos para o resultado do cenário descrito acima, veremos que ele é bem parecido com o resultado que desejamos, apenas espelhado. Então podemos tentar aplicar essa lógica no nosso layout, definindo também as larguras para o conteúdo, de forma que a parte do texto fique com 80% da largura da tela e a foto e a barra lateral com 20%.

main {
    width: 80%;
}

img,
aside {
    width: 20%;
    float: right;
}

aside {
    clear: right;
}
Porém, se fizermos isso, o resultado não será o esperado: a foto e a barra lateral ficam na mesma altura do rodapé. Além disso, a barra lateral fica mais larga que a foto.

Resultado do float: right na imagem e no aside

Esse segundo problema ocorre devido ao box model padrão do navegador. Como a barra lateral tem padding e o padding não entra no cálculo da largura do elemento por padrão, ela acaba ficando mais larga. Para resolver esse problema, basta dizermos ao navegador que queremos que ele calcule a largura do elemento levando o padding em conta (e a borda, que colocaremos mais adiante) usando a propriedade box-sizing com o valor border-box:

aside {
    box-sizing: border-box;
}
Isso resolve o problema da largura, mas não o fato de a imagem e a barra lateral estarem na altura do rodapé. Porém, na verdade, isso deveria acontecer, pois os elementos flutuados permanecem na altura em que estavam e a imagem, de fato, estava abaixo do texto, como está agora.

Como fazer, então, para que ela fique no topo da página? A solução é lembrar que floats seguidos formam uma linha. Se o <main> também for um float, a imagem ficará em linha com ele. Ou seja, basta adicionar a declaração:

main {
    float: left;
}
Ao fazermos isso, a imagem e a barra lateral ficarão no lugar certo, ao lado do cabeçalho. Mas, estranhamente, o rodapé da página também sobe. Por que?

Resultado após aplicar float: left no main

Cuidado com tantos floats!
Precisamos lembrar que, sempre que transformamos um elemento em float, ele sai do fluxo da página, o que faz com que o resto do conteúdo suba. Neste caso, o rodapé subiu para ocupar o espaço entre os floats que criamos.

Para resolver esse problema, basta lembrarmos da propriedade clear. Não queremos nenhum float em nenhum dos lados do nosso rodapé, então podemos declarar:

footer {
    clear: both;
}
Com isso, chegamos num resultado bem mais próximo do desejado.

Resultado após aplicar o clear:both no rodapé

Frequentemente, quando usamos floats para posicionar os elementos do nosso layout, precisamos "limpar" a sequência de floats, como no nosso caso agora. Assim, é comum encontrarmos declarações clear: both nesse tipo de layout. Essa é uma solução tão comum que até ganhou um nome popular: clearfix. Frequentemente, projetos incluem em seus arquivos CSS uma classe cujo único propósito é fazer essa "limpeza" de floats:

.clearfix {
    clear: both;
}
Se tivéssemos essa classe no nosso arquivo CSS, bastaria aplicá-la no nosso rodapé:

<footer class="clearfix">
    &copy; João da Silva 2014
</footer>
Aumentando a imagem
Falta apenas fazer com que a imagem fique maior do que a barra lateral, sobrepondo um pouco do <main> também. Para conseguir esse resultado, precisamos entender mais uma propriedade, que veremos na próxima aula.



