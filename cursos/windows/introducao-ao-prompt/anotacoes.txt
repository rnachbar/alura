############### 1. Os primeiros comandos no prompt ###############

Você já desenvolveu usando Windows como sistema operacional?
Este treinamento foi criado para o aluno que usa Windows e tem pouca ou nenhuma experiência no Prompt do Windows . Veremos os comandos principais do Prompt para lidar com diretórios, arquivos, e mexer nas variáveis de ambiente.

O grande objetivo é que o aluno saiba instalar e configurar as ferramentas utilizadas em vários outros treinamentos da plataforma Alura. Para quem já desenvolve usando Windows é muito provável que este treinamento seja básico demais.

Por que usar um terminal? Mouse dá choque!
Aqui no Alura usaremos várias ferramentas na linha de comando! Usar a linha de comando significa que não teremos uma interface gráfica bonita, e o mouse não vai funcionar! E pode acreditar , dá para fazer muita coisa sem usar o mouse ou toques na tela.

Mas ai vem a pergunta, por que eu preciso aprender isso? Bom, muitas ferramentas no setor de desenvolvimento não possuem uma interface gráfica, pois elas devem funcionar em qualquer computador, inclusive nos computadores que não possuem essa interface, como por exemplo os computadores na nuvem.

Outra razão, e talvez a mais importante, é que as ferramentas na linha de comando podem ser controlados facilmente através de scripts, ou seja outras ferramentas. Isso é relacionado com a automação, ensinando as máquinas a fazerem vários passos automaticamente, e muito mais rápido do que a gente consegue com o mouse em mãos.

Enfim, o desenvolvedor de hoje em dia precisa dominar alguns comandos da linha de comando para se dar bem no desenvolvimento e também aqui na plataforma Alura! Vamos lá? Bora aprender?

Abrir o Prompt de comando
O primeiro passo é abrir um terminal (ou console). No mundo Windows esse terminal se chama Prompt de comando ou abreviando cmd. Para abrir um novo terminal devemos ir em Todos os Programas, Acessórios e depois no Prompt de Comando , aí abrirá uma tela preta linda :).

Obs: Outra forma de abrir o Prompt é clicar no Botão Iniciar e no campo de pesquisa digitar Prompt ou cmd:

A partir dessa tela podemos interagir com o sistema operacional escrevendo comandos! Vamos ver como navegar entre pastas, criar novas pastas, ler, executar, copiar e mover arquivos e muito mais. Vamos tentar?

Obs: O termo prompt se refere ao sinal >

Lembrando: O Prompt também é chamado de cmd , terminal ou console. Todos estes são sinônimos nesse contexto.

No mundo do desenvolvimento qualquer nova tecnologia que você aprende começa com o Oi Mundo para te dar um boas vindas nessa tecnologia. Aqui não será diferente! Com um terminal aberto digite:

echo Oi Mundo


Você já deve saber o que o comando echo faz. Sim, imprime no terminal, mas ainda não é muito útil para gente, né?

Listando arquivos
Vamos dar uma olhada com mais carinho no que aconteceu. Ao abrir o prompt, ele automaticamente inicia na sua pasta pessoal. Repare que antes do cursor aparece o caminho da pasta atual seguido pelo prompt (>), que aqui é:

C:\Users\caelum>
O C: é a partição principal nesse computador. Pode ser que você tenha outras instaladas como o D:, mas o prompt sempre começa no C:, seguido pelo a pasta Users e na sub-pasta caelum. A contra barra \ é o sinal separador de diretórios na linha de comando, ok?

Já que o Prompt está pedindo que a gente execute algo vamos listar todos os arquivos através do comando dir. Escreva no prompt:

dir


Recebemos uma lista dos arquivos e pastas existentes. Então através do dir sempre sabemos o que se encontra na pasta atual do prompt, ok?

Navegando entre diretórios
Vimos o comando dir, que mostra todo o conteúdo da pasta atual. Vamos entrar em uma subpasta e depois re-executar o comando. Podemos mudar a pasta com o comando cd (change directory) seguido do nome da subpasta:

cd Documents
Depois liste novamente:

dir


Vamos voltar para o diretório anterior. Em outras palavras, vamos subir na hierarquia de diretórios, ir uma pasta para cima. Novamente o comando cd tem esse papel mas agora seguido por ..:

cd ..
dir


Criando diretórios
Voltamos para a pasta do seu usuário, mas será que a gente também pode criar novos diretórios nela? A resposta é sim e o comando que faz a mágica se chama mkdir (make directory). Vamos criar um nova pasta com o nome de codigo:

mkdir codigo
dir


Ao listar podemos ver a nossa pasta criada, ótimo!

Será que podemos entrar nessa pasta? Lógico! E você já sabe o comando: cd codigo.

Ao executar dir nós vemos duas coisas estranhas. Tem um diretório que se chama . e um outro ... O que é isto?

Bom o . se refere ao diretório atual, onde nos estamos. Por exemplo, podemos passar para o comando dir o diretório que queremos listar:

dir C:\Users\caelum\codigo`
Mas já que estamos nessa pasta podemos usar:

dir .


ou mais fácil ainda:

dir
Tudo bem até aqui? Agora tente executar dir .. . O resultado deve ser familiar para você, o comando deve listar o conteúdo do diretório logo a cima!



Atenção: Já vou te dar uma dica, de desenvolvedor para desenvolvedor. Evite os acentos e espaços nos nomes de arquivos e diretórios. Muitas ferramentas de desenvolvimento não se dão bem com esses caracteres. Por exemplo o Django do mundo Python gera vários problemas e dificulta demais o trabalho. Evite isso o máximo possível!

Muitos desenvolvedores na Alura usam o caractere _ invés do espaço na hora de dar nomes para diretórios. Por exemplo:

mkdir codigo_java
Removendo diretórios
Vamos remover a pasta codigo_java e criar um sub-diretório que se chama java apenas. Para remover um diretório existe o comando rmdir:

rmdir codigo_java


e para criar a pasta nova:

mkdir java


Limpando o terminal
Com o tempo, o terminal vai ficar poluído com comandos antigos, que tiram o foco e dificultam a legibilidade. Por isso existe um comando para limpar a tela que se chama cls (clear screen). Vamos testar:

cls
Ótimo, melhor continuar com tela a limpa!

Trabalhando com arquivos
Já podemos criar, apagar diretórios e navegar entre eles na linha de comando. Isso já vai nos ajudar muito nos treinamentos do Alura, pode acreditar. No entanto também é preciso saber como lidar com arquivos. Claro que nada substitui um editor de texto de verdade mas em alguns casos é uma boa ajuda poder mexer com arquivos na linha de comando.

Vamos criar um arquivo rapidinho. Você se lembra do comando echo? Vamos testá-lo:

echo Oi Mundo > saida.txt
O que isso faz?? Calma, o comando echo você já conhece, mas o resto? Talvez você reparou que não apareceu nenhuma saída no terminal! Toda a saída foi gravada no arquivo saida.txt. Então o caractere > pega a saída de um comando e a grava no arquivo indicado (ou repassa para outro comando). Digite dir para ver o arquivo recém criado:

dir


Deve aparecer o arquivo saida.txt. Mas como posso ver o conteúdo desse arquivo? Fechar o terminal e abrir um editor de texto não vale :) Claro que há um comando para isso, e ele se chama type, então digite:

type saida.txt


Vamos testar novamente, mas antes disto vamos limpar o nosso terminal (cls). Primeiro apagaremos o arquivo antigo, o comando que faz isso se chama del:

del saida.txt


E agora vamos criar um novo arquivo, novamente usando o comando echo para imprimir o nosso texto e o > para salvá-lo em um arquivo:

echo Bem-vindo a Alura > saida.txt
Usando o type para mostrar o conteúdo do arquivo...

type saida.txt
Movendo e copiando arquivos
Gostamos tanto do nosso arquivo que queremos criar uma cópia. Isso é muito fácil de se fazer, e eu acho até mais fácil do que usando o mouse. Vamos lá:

copy saida.txt saida2.txt
Ótimo, o comando copy (copy) gera então uma cópia do arquivo. Vamos verificar o conteúdo desse arquivo:

type saida2.txt


Ok beleza, funcionou como esperado, mas eu não gostei do nome. Ainda bem que podemos renomear facilmente o arquivo:

rename saida2.txt mensagem.txt
O comando rename altera o nome dos arquivos! Aliás, o comando rename não só serve para arquivos como também para pastas. A mesma regra aplica para o comando move que move um arquivo ou pasta para outro lugar, por exemplo:

move mensagem.txt ..


Nesse comando movemos o arquivo mensagem.txt um diretório a cima, indicado pelo ...

Agora você já pode comemorar parcialmente. Esse conhecimento já vai ter ajudar muito. Melhor ainda se você fizer os exercícios.

No próximo capítulo veremos como mexer nas variáveis de ambiente, e ai sim você conseguirá configurar o Java, Ruby ou Python pela linha de comando!

O que aprendemos
para que serve o Prompt
criar (mkdir) e remover (rmdir) diretórios
copiar (copy) e apagar arquivos (del)
imprimir no prompt com o comando echo
saber a diferença entre . e ..
criar arquivos com >
ver o conteúdo do arquivo (type)
mover pastas e arquivos (move)
renomear diretórios e arquivos (rename)

Qual sinal/caractere é utilizado na linha de comando para separar os diretórios?

O caractere correto é o contra-barra: \
O caractere > tem o significado de prompt (o convite de escrever um comando no terminal).

O caractere : faz parte da partição, por exemplo: C:

A barra / é utilizada como separador no mundo Unix, mas também funciona no mundo Windows! Você pode fazer o teste agora! Abra um prompt:

cd C:
cd Users/caelum
Substitua caelum pelo nome do seu usuário!

Cada comando possui uma pequena ajuda no terminal, basta digitar help <nome do comando>, por exemplo:
help dir
Nesse caso aparecem as opções do comando dir para personalizar a visualização (entre outras informações).

Para que existe a opção /O? Tente descobrir usando o comando help!

A opção /O existe para ordenar a saída do comando dir e possui mais parâmetros para definir qual ordem queremos, por exemplo:
Ordenando pelo tamanho (S-Size):

dir /O:S
Ou ordenando pela data:

dir /O:D
Pelo comando dir podemos também mostrar o conteúdo de um diretório que não é o atual. Por exemplo, para ordenar pela data e mostrar o conteúdo do diretório C: digite:

dir /O:D C:\
Você pode inverter a ordem dos parâmetros do comando dir para obter o mesmo resultado:

dir C:\ /O:D

Com qual comando podemos trocar a pasta na linha de comando?

O comando para trocar de pasta é cd (change directory), por exemplo
cd C:\
Também podemos definir o caminho:

cd C:\Documentos\workspaces
(Claro que essa pasta deve existir para funcionar)

Escrevendo comandos no terminal vai poluir a tela e de vez em quando é preciso limpá-la. Qual era o comando que executava esta função mesmo?

O comando correto é cls que é a abreviação de clear screen.

Vimos na aula o comando dir para mostrar o conteúdo de um diretório.
Se você executa dir no prompt sempre aparecem mais dois diretórios estranhos: . e ..

Qual é o significado de . e ..?

. se refere ao diretório atual, .. se refere ao diretório logo acima na hierarquia.
Você pode testar isso e mostrar o conteúdo do diretório atual usando o .:

dir .
Nesse caso podemos omitir o . já que é o padrão do comando dir.

Análogo podemos usar ..:

dir ..
Que mostra o conteúdo da pasta logo acima na hierarquia de diretórios.

O . e .. também funcionam com outros comando como o cd

Qual caracter é utilizado para redirecionar a saída de um comando?

O caracter > redireciona a saída de um comando.
Por exemplo, podemos gravar a saída do comando set em um arquivo:

set > variaveis.txt
E para mostrar o conteúdo basta digitar:

type variaveis.txt

Vimos neste capítulo do treinamento que podemos criar um arquivo utilizando o sinal >, mas e se quisermos adicionar mais linhas a um arquivo de texto já existente, por exemplo para guardar o resultado de diversas execuções de um programa em um único arquivo?
Para isto existe o >>, quando colocamos o sinal de maior duas vezes o Prompt entende que só deve criar um arquivo novo quando o arquivo que pedimos não existir! Caso ele já exista, ele adiciona o novo conteúdo ao final do arquivo, sem sobrescreve-lo!

Veja só como funciona:

Digamos que primeiro criamos um novo arquivo de texto com o nosso conhecido comando echo :

echo Ola mundo > arquivo.txt

Ao abrirmos nosso arquivo.txt , vemos o texto que esperávamos:

type arquivo.txt

//arquivo.txt
Ola Mundo
Porém se agora desejarmos adicionar um novo texto abaixo de "Ola Mundo"? Utilizamos o '>>'!

Desta forma:

echo Novos dados! >> arquivo.txt

Quando abrimos nosso arquivo.txt, vemos que o texto foi adicionado corretamente:

type arquivo.txt

//arquivo.txt
Ola Mundo
Novos dados!

Utilizamos o >> quando queremos adicionar um texto a um arquivo que já existe, sem sobrescreve-lo. Se tentarmos utilizar o >> em um arquivo que ainda não existe, ele terá o mesmo comportamento do >, criando assim um arquivo novo e colocando o texto lá dentro.

Você já reparou que quando abrimos o prompt ele sempre abre na mesma pasta? Essa é a pasta do seu usuário, onde a maioria das pessoas salvam os Documentos, Fotos e Videos. Lá também ficam os arquivos particulares do seu usuário , como de configuração dos programas específicos e favoritos do seu navegador. A grande vantagem de cada usuário ter sua pasta é que temos uma separação dos dados do sistema e dos dados de cada usuário, facilitando assim o backup dos dados dos usuários caso seja necessário e aumentando a segurança também.
A pasta do seu usuário é conhecida como pasta Home, e essa nomenclatura é adotada por muitos desenvolvedores quando querem se referir a pasta do usuário, independentemente do sistema operacional.

A pasta home é a pasta que é aberta quando abrimos o prompt. Ela possui arquivos de configuração dos programas do usuário e também arquivos pessoais. O nome "home" é adotado em vários locais, para se referenciar a pasta do usuário, e é comum essa pasta existir em todos os sistemas operacionais.

Vamos fazer mais um teste! No prompt digite o comando tree:

Dependendo do diretório atual podem aparecer muitas informações mas repare que o comando tree mostra as pastas e subpasta organizado em uma árvore.

O tree pode ser útil para entender a estrutura de um projeto. Muitas vezes você precisa baixar um projeto na Alura para importar alguns arquivos iniciais. Com o comando tree você já pode ver facilmente como o projeto está organizado! Muito útil :)

O comando more funciona de um jeito semelhante ao comando type, com a diferença de exibir página por página do arquivo no terminal, em vez de mostra-lo todo de uma vez.
O seu uso é análogo ao comando type, podendo ser chamado assim:

more arquivo.txt

Ele exibirá uma página de cada vez do arquivo, sendo muito útil quando queremos exibir arquivos de texto com várias linhas para ir lendo lentamente, em vez de abri-lo todo no terminal de uma vez. Um exemplo disso é quando queremos ler os logs de uma aplicação que está em um servidor na nuvem, neste caso é preciso ler grandes arquivos de texto linha a linha, para identificar um bug ou realizar algum teste.

Agora que você já conhece o comando more e um exemplo prático de sua aplicação, vou lhe mostrar como controlar a exibição das páginas:
Para passar de página em página, utilize a tecla espaço do seu teclado.
Para passar de linha a linha, utilize a tecla enter do seu teclado.
Para sair da exibição do comando, sem chegar ao final do arquivo utilize a tecla q do seu teclado.
Como você já sabe , sempre que quiser aprender mais sobre um comando, pode utilizar o help, então caso tenha a curiosidade de aprender ainda mais sobre o comando more, é só digitar help more no terminal!

############### 2. Um novo prompt e executando scripts ############### 

Terminal só em preto e branco?
No último capítulo vimos como usar o terminal/prompt e os comandos principais para lidar com arquivos e diretórios. Vimos comandos como dir, del ou cd. Vamos continuar usando o prompt, mas antes de aprender novos comandos, instalaremos uma versão um pouco mais amigável para nós, humanos. Há uma variação do terminal que se chama cmder, a qual deixa a linha de comando colorida e com algumas facilidades. Nada te impede de continuar com o terminal antigo, no entanto vamos instalar o cmder para melhorar a visualização dos comandos.

Instalação do cmder
Para instalar o cmder devemos primeiro baixar o ZIP no site: http://cmder.net



Escolha a versão mini e depois extraia o ZIP.



Para abrir o novo terminal do Cmder basta entrar na pasta do cmder e dar um duplo-clique no executável. Isso faz com que abra um novo terminal, e veja que já está colorido! A diferença é sutil, mas vai nos ajudar mais para frente.



Para saber mais sobre Git: Aqui usaremos a versão mínima do cmder mas para quem está interessado em usar o GIT já pode baixar a versão full também. O Git é um sistema de versão para código fonte. Ele ajuda gerenciar esse código fonte. Isso significa, sincronizar o trabalho de vários desenvolvedores no mesmo projeto. O Git mantém um histórico das alterações e cria automaticamente backups. Na Alura temos um treinamento focado nessa ferramenta poderosa: https://www.alura.com.br/course/PM-89

Meu primeiro script
Uma das motivações para aprender os comandos no terminal é a automação de tarefas, isto é, fazer várias coisas repetitivas mais facilmente. Uma das tarefas de um desenvolvedor é criar um backup de arquivos. Vamos, então, criar um pequeno script para "backupear" os arquivos. Tudo executado na linha de comando, ok?

Os scripts no mundo Windows não são nada mais do que arquivos de texto com a extensão bat. bat significa batch, em português "lote". Ou seja, com esse script é possível executar vários comandos em lote.

Vamos criar um arquivo batch, na linha de comando:

echo cls > script.bat
Repare que o comando não foi executado ainda, gravamos apenas o comando cls no arquivo script.bat.



E como posso executar o script? Basta digitar:

script.bat
O script foi chamado e todos os comandos dentro dele foram executados sequencialmente! Como resultado, a tela está limpa! Fantástico :)

Processamento em lote
O arquivo tem a extensão .bat (batch, lote) não por acaso, pois podemos executar mais que um comando em sequência. Vamos abrir o arquivo script.bat em um editor de texto. Vou usar um bem simples.

Já que podemos executar qualquer comando, adicionaremos depois do cls um echo para perguntar se ele realmente quer continuar:

cls
echo Realmente quer fazer backup?
E para parar a execução podemos adicionar o comando pause:

cls
echo Realmente quer fazer backup?
pause


O comando pause faz com que o usuário do script precise confirmar a continuação da execução do script. Vamos testar uma vez para deixar mais claro:



Isto nos permite dar a opção do usuário abortar a execução do script caso ele não deseje continuar, através do atalho CTRL + C ou simplesmente fechando o terminal.

Ótimo, já é um bom início. Agora vamos limpar a tela com cls, adicionar uma mensagem para o usuário saber que vamos iniciar o backup e preparar a pasta do backup através do script, indo para a pasta home do nosso usuário e criando o diretório de backup:

cls
echo Realmente quer fazer backup?
pause

cls
echo ok, fazendo backup...
cd C:\Users\caelum
mkdir backup
Todos esses comandos já conhecemos e agora podemos copiar os arquivos da pasta codigo para a pasta backup. O problema ainda é que o comando copy é muito simples e não consegue copiar pastas e sub-pastas. Ainda bem que existe o irmão gêmeo dele, o xcopy. O xcopy copia pastas e sub-pastas desde que usamos os parâmetros /E (para copiar subpastas) e /Y (para confirmar automaticamente a sobrescrita de arquivos). Sabendo disso podemos escrever:

cls
echo Realmente quer fazer backup?
pause

cls
echo ok, fazendo backup...
cd C:\Users\caelum
mkdir backup

xcopy /E /Y "C:\Users\caelum\codigo"  "C:\Users\caelum\backup"
Agora no fim do script podemos listar os arquivo da pasta backup:

cls
echo Realmente quer fazer backup?
pause

cls
echo ok, fazendo backup...
cd C:\Users\caelum
mkdir backup

xcopy /E /Y "C:\Users\caelum\codigo" "C:\Users\caelum\backup"  

echo Listando os arquivos do backup
dir C:\Users\caelum\backup
Pronto! Agora nosso script realiza o backup da pasta codigo como desejávamos!

Repare que o script é nada mais de um conjunto de comandos pequenos para realizar uma tarefa maior.

O que aprendemos?
Instalar o cmder para usar no local do prompt padrão.
Como criar um script no Windows (.bat).
Como executar scripts .bat.
O comando xcopy, para copiar pastas e sub-pastas.
O comando pause, para esperar uma interação do usuário com o terminal.
A criar um script de backup, para automatizar uma tarefa repetitiva.

Para que usamos um script na aula?

Para automatizar tarefas na linha de comando!
O batch script é um arquivo simples que agrupa uma serie de comandos, normalmente utilizado para automatizar tarefas cotidianas. Um arquivo batch (.bat) é um script que é executado sequencialmente pelo prompt (um comando depois do outro).
No desenvolvimento usamos scripts de diversas formas. Por exemplo, para limpar uma máquina antes de instalar arquivos novos, guiar o usuário pela instalação, preparar arquivos de configuração e importar dados dentro da aplicação ou de um banco de dados. E é claro, o exemplo clássico de um script para automatizar o backup!

Tente executar o comando seguinte pelo prompt:
echo %date%
Isso deve imprimir a data atual. Agora crie um pequeno script (por exemplo chamado de data.bat) que imprime a data atual!

Você também pode imprimir a hora: echo %time%
Adicione isso no seu script! O script fica:

echo %date%
echo %time%
Os scripts podem ser muito mais poderosos. Até é possível programar dentro deles, criar menus, acessar a rede e muito mais. Aqui estamos focados para guiar você melhor na plataforma Alura. Normalmente, os recursos mais avançados são utilizados pelos administradores de infraestrutura.

E para não esquecer o mundo Linux: esses pequenos scripts de automação são muito mais frequentes no Linux e Unix. Lá se chamam de shell script mas tem o mesmo propósito, automatizar tarefas!

Como vimos neste capítulo, o comando xcopy serve para copiar pastas e subdiretórios, mas apenas se executado com um argumento específico. Que argumento é esse ?

/E
O argumento que deve ser passado para o xcopy é o /E/. Este argumento indica ao xcopy que ele deve copiar todas as pastas e sub-pastas, incluindo as que estão vazias.
Então para copiar uma pasta e seus subdiretórios devemos fazer assim:

xcopy /E C:/Users/caelum/origem C:/Users/caelum/destino

Se você reparar na execução do simples script abaixo:
cls
echo Dia de hoje:
echo %date%
echo Hora atual:
echo %time%
Ele é exibido desta maneira no prompt: Exemplo com echo on

Você pode notar que é exibido duas vezes cada mensagem, uma vez exibindo o comando e outra na saída dele, pois quando executamos um script no prompt, ele exibe o nome do comando que está dentro do script e o seu resultado. Para desabilitar essa exibição dos comandos na hora de executar um script, devemos começar o script com o comando @echo off, ficando desta maneira:

@echo off
cls
echo Dia de hoje:
echo %date%
echo Hora atual:
echo %time%
Deixando a execução do nosso script assim:

Exemplo com echo off

Muito mais limpo, não é mesmo?

O comando @echo off faz com que os comandos que estão nos scripts não apareçam durante sua execução, mostrando apenas seus resultados.
É útil quando queremos deixar a execução dos scripts mais limpas, ou quando temos alguma informação sensível no script que não desejamos que usuário veja.

Qual a funcionalidade do comando pause ?

Ele espera por uma interação do usuário no terminal, para poder dar sequência aos possíveis próximos comandos.

O comando pause espera por uma interação do usuário com o terminal, pausando o script em que ele foi chamado. Ele serve para o usuário ter tempo de confirmar se quer mesmo continuar executando o script atual ou se deseja abortar a sua execução.
Para dar continuidade a execução do script, basta apertar qualquer tecla, mas para aborta-lo é preciso utilizar o atalho CTRL + C ou fechar o terminal que chamou o script.

Para saber mais: Facilidades do cmder
Além do terminal colorido o cmder trás algumas funcionalidades extras no terminal que ajudam muito o dia a dia do desenvolvedor, vamos dar uma olhada em algumas delas!

Copiar e Colar
Se você já tentou copiar e colar no prompt do Windows pode ter reparado que é extremamente trabalhoso, precisando que usar o mouse para essa tarefa que é tão trivial. Uma das facilidades que o cmder nos trás é que agora é possível colar no Prompt com um atalho do teclado, basta apertamos CTRL + V. Bem mais prático, não acha? (Caso este atalho não funcione com você, experimente utilizar o CTRL + SHIFT+ V, pois dependendo da configuração do seu teclado o atalho pode mudar!)

Para copiarmos qualquer coisa que está no terminal, basta apenas selecionarmos ela com o mouse! Isso mesmo, ao selecionar o conteúdo ele vai automaticamente para a área de transferência, podendo ser colado em qualquer lugar!

Múltiplas abas
Quando estamos trabalhado em um projeto, é muito comum precisarmos navegar entre várias pastas diferentes ou ter que executar múltiplos comandos simultaneamente. Quando utilizamos o prompt tradicional do Windows, muitos desenvolvedores acabam abrindo diversas instâncias do mesmo, para não ter que ficar trocando de diretório toda hora, mas isso acaba gerando uma confusão pois temos que usar o ALT + TAB repetidas vezes para trocar entre os prompts abertos e as aplicações que utilizamos para desenvolvimento.

No cmder, nós temos uma solução para esse problema, as famosas abas! Inspirado nas abas que temos hoje nos navegadores, o cmder implementou algo bem semelhante. Podemos ter várias instâncias do cmder, lado a lado, organizada por abas. Para criar uma aba, basta utilizarmos o atalho de teclado CTRL + T e dar um ENTER para confirmar. Ele abre uma aba com um terminal novinho para nós! Isso ajuda muito na produtividade! Para alternar entre abas, é só usar o atalho CTRL + TAB que ele troca para a próxima aba, ficando muito fácil ter um terminal em cada pasta que necessita de atenção, um para o consultar o banco de dados e uma para acessar um possível servidor na nuvem!

Configurações extras
O cmder é terminal extremamente personalizável, se você usar o atalho Windows + ALT + P , você abrirá as configurações dele, indo na parte de Features, você verá que é possível alterar quase tudo do terminal. Lá tem configuração das cores que ele utiliza, do nível de transparência, do tipo de cursor e muitas outras coisas que podem deixar o terminal do seu jeito.

Ele também tem como exportar e importar as configurações, então caso um dia você precise formatar ou trocar de computador, você pode levar as suas configurações com você.

Explore um pouco este menu e deixe o cmder do seu jeito!

O cmder é um terminal que além de ser mais bonito, traz diversas novas funcionalidades para ajudar a vida dos desenvolvedores. Vale a pena gastar uns minutinhos se acostumando com ele, pois este tempo gasto facilmente retornará em produtividade quando estiver trabalhando em alguma aplicação!

############### 3.  Variáveis de ambiente e instalação do JDK ############### 

Executando script de todo lugar: PATH
No capítulo anterior nosso script de backup estava funcionando, mas ainda tem um probleminha. Para poder chamar o script, devemos estar com o terminal na mesma pasta onde se encontra o script. Tem que ser possível executar o script a partir de qualquer pasta, não acha?

Vejamos como fazer para isso funcionar. Quando a gente executa algum comando no terminal, o Windows procura esse comando em lugares específicos. Pense que qualquer comando, como dir ou cd, também são pequenos scripts (essa é uma visão pouco simplificada , mas vale a analogia). Ou seja, o Windows precisa encontrar esses scripts, certo? E, para ajudá-lo, já existem alguns caminhos padrões que o Windows fica varrendo para achar esses pequenos scripts. Esse local padrão,aonde se encontram os caminhos para os scripts é o famoso PATH.

Acessando a variável PATH
Esses caminhos ficam salvos dentro de uma variável do sistema com o nome PATH. E podemos imprimir esses caminhos no prompt:

echo PATH
Opa! Só imprimiu PATH. Esqueci uma coisa: se quisermos ver o conteúdo da variável PATH devemos colocar um simbolo de % antes e depois, ficando assim:

echo %PATH%
Agora sim! Aparecem um monte de caminhos de diretórios onde o Windows procura executáveis e scripts. Repare que cada caminho está separado por um ponto e vírgula:

Path=C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Windows Live\Shared;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files (x86)\Intel\OpenCL SDK\2.0\bin\x86;C:\Program Files (x86)\Intel\OpenCL SDK\2.0\bin\x64


Alterando o PATH pelo prompt
A nossa tarefa é adicionar a pasta onde se encontra o nosso script de backup no PATH . Assim o Windows também vai poder achar o nosso script. Vou te dar mais uma dica, essa pasta com os executáveis/scripts normalmente é chamada de bin. Nem sempre é assim, mas a maioria das ferramentas seguem esse padrão.

Então vamos criar uma pasta bin e jogar o nosso script lá dentro. Digite cd %HOME% para voltar na pasta raiz do usuário e crie o diretório bin com o mkdire em sequência movendo o nosso script para dentro da pasta bin com o comando move:

cd
mkdir bin
move script.bat bin


Ótimo!

Agora respire fundo, pois temos que alterar a variável PATH para adicionar o nosso novo diretório (C:\Users\caelum\bin). A ideia é que precisamos redefinir o PATH para também incluir o nosso diretório. Baseado no conteúdo do que exibimos da variável PATH, podemos ver que temos que adicioná-lo ao final, separando por ponto e vírgula do resto. Em outras palavras:

set PATH=%PATH%;C:\Users\caelum\bin
Alteramos a variável PATH com o comando set, baseado no PATH existente (%PATH%) adicionando o novo diretório (C:\Users\caelum\bin), usando o caractere separador ;. Será que funcionou? Podemos verificar isso facilmente imprimindo o PATH na linha de comando:

echo %PATH%


Lá no final temos o nosso diretório, ou seja, na teoria, o Windows vai encontrar o nosso script. Façamos o teste:

script.bat
Podemos comemorar porque o Windows encontrou o nosso script!!

Variáveis de ambiente
Vimos rapidamente o comando set, que serviu para alterar a variável PATH. Existem muitos mais variáveis além da PATH, e ainda deram um nome bonito para elas: Variáveis de ambiente.

O interessante é que o comando set também mostra TODAS essas variáveis! Como? Digite:

set


Repare que existem variáveis que guardam o nome do computador, do usuário, da arquitetura do computador e muito mais. Até podemos criar novas variáveis e veremos que algumas plataformas de desenvolvimento (por exemplo Java) exigem a criação de variáveis próprias.

Para criar uma variável própria, também utilizamos o comando set, fazendo assim:

// Criando a variável PASTA_CÓDIGO
set PASTA_CODIGO=C:\Users\caelum\codigo
Você pode testar digitando set ou echo %PASTA_CODIGO%



Variáveis permanentes
Parece tudo ótimo, mas faça um teste: feche e reabra o terminal. Agora digite echo %PASTA_CODIGO%. Não funcionou! Para nossa surpresa, a variável que acabamos de criar parou de funcionar! O terminal esqueceu as variáveis :( Esqueceu até da nossa alteração da variável PATH!

Infelizmente as nossas variáveis só são lembradas enquanto o terminal está aberto. Mas queremos deixar essas configurações permantes e existe um modo para isto. A solução é um comando bem parecido com o set, o setx que realmente salva o PATH de maneira permanente, porém como este comando altera as variáveis do sistema permanentemente, ele é especial e precisa ser executado no prompt de comando tradicional do windows.

O comando setx é praticamente igual ao set, só que não tem um = nem um ; e separamos o caminho com aspas. Outro detalhe muito importante é adicionar o argumento /M no final do setx, que indica que queremos alterar uma variável do sistema.

setx PATH "%PATH%;C:\Users\caelum\bin" /M


Obtivemos um erro! A alteração das variáveis do sistema é algo tão importante no sistema operacional, que o prompt de comando em modo normal não tem permissão para mexer nelas, nós precisamos do prompt em modo administrador. E para abrir o prompt no modo administrador é algo bem simples, basta clicarmos com o botão direito do mouse e ir em Executar como administrador.



Dá até pra ver no topo da janela que o prompt mudou para o modo Administrador, agora é só executar nosso comando setx:



Agora sim nosso PATH foi alterado.

Existe também uma forma de alterar o PATH pela interface gráfica mas isso fica para os exercícios!

Instalando nossa primeira linguagem
Agora que temos conhecimento de como manipular as variáveis de ambiente do Windows, instalar e configurar uma nova linguagem ou ferramenta é algo bem fácil! Vamos instalar o Java do zero para ver como é exemplo disso:

O primeiro passo é baixar o JDK pelo site, acesse: http://www.oracle.com/technetwork/java/



Dentro dos Top Downloads, escolha o Java SE. Na nova página clique no icone Java (Java Platform (JDK))

http://www.oracle.com/technetwork/java/javase/downloads/index.html



Agora temos que escolher o JDK adequado para a versão do nosso sistema operacional! A versão é a para Windows, claro, mas mesmo assim há duas opções: Um download para x86 e outro para 64bit. E agora?



Escolhendo o JDK para sua arquitetura do processador
Essas duas opções são relacionadas com a arquitetura do processador. Para descobrir qual é a opção correta podemos usar o nosso prompt! Abra o terminal e digite:

echo %PROCESSOR_ARCHITECTURE%


Agora deve aparecer x86 ou AMD64 (ou IA64). Tudo que tem 64 no final indica que o Windows é de 64 bits, já o x86 indica que é de 32 bits. Beleza, já sabemos a arquitetura e qual download do Java escolher!

Instalando o JDK
Escolha então o JDK (Java Development Kit) certo e, depois de ter aceitado a licença, podemos finalmente baixar o JDK. Baixe o arquivo .exe, que é algo como java-8xxx-windows-xxx.exe.

Execute o arquivo java-8xxx-windows-xxx.exe e passe pelo Wizard de instalação (pode instalar tudo, incluindo o source, não desmarque nada).



Repare que o diretório de instalação é C:\Program Files\Java\jdk1.8.0_65. Vamos lembrar disso!

O registro de sua VM (Virtual Machine) no site da Oracle é opcional.

Testando Java no prompt e configuração do PATH
Chegou o momento de ver no prompt se o Java realmente foi instalado corretamente. Vamos abrir o cmder ou o cmd e testar, digite:

java -version
Deve aparecer:

java version "1.8.0_66"
Java(TM) SE Runtime Environment (build 1.8.0_66-b18)
Java HotSpot(TM) Client VM (build 25.66-b18, mixed mode, sharing)
Funcionou? Se funcionou pode ficar feliz pois o instalador já adicionou a pasta bin do Java no PATH!. Mas vamos testar também o compilador do Java:

javac -version
Não funcionou:

'javac' is not recognized as an internal or external command,
operable program or batch file.


Hum, vamos verificar o PATH:

echo %PATH%


Não encontramos nada sobre o nosso jdk1.8.0, mas tem um caminho suspeito:

C:\ProgramData\Oracle\Java\javapath
Vamos verificar esse caminho:

dir C:\ProgramData\Oracle\Java\javapath

16/12/2015  18:46    <DIR>          .
16/12/2015  18:46    <DIR>          ..
16/12/2015  18:46    <SYMLINK>      java.exe [C:\Program Files\Java\jre1.8.0_65\bin\java.exe]
16/12/2015  18:46    <SYMLINK>      javaw.exe [C:\Program Files\Java\jre1.8.0_65\bin\javaw.exe]
16/12/2015  18:46    <SYMLINK>      javaws.exe [C:\Program Files\Java\jre1.8.0_65\bin\javaws.exe]
               3 File(s)              0 bytes
               2 Dir(s)     541.597.696 bytes free


Repare que nessa pasta não tem nada do javac. Devemos adicionar ao PATH a pasta onde se encontra o javac. Nós já sabemos a pasta de instalação do JDK:

dir  "C:\Program Files\Java\jdk1.8.0_65"
 Directory of C:\Program Files\Java\jdk1.8.0_65

16/12/2015  18:47    <DIR>          .
16/12/2015  18:47    <DIR>          ..
16/12/2015  18:45    <DIR>          bin
06/10/2015  17:46             3.244 COPYRIGHT

\\ muito mais infos ...


Obs: Usamos aspas duplas pois tem um espaço no caminho.

Logo no início encontramos a pasta bin. Agora só falta adicionar ao PATH:

setx PATH "%PATH%;C:\Program Files\Java\jdk1.8.0_65\bin" /M


Fechando e abrindo o terminal podemos testar novamente o comando:

javac -version
  javac 1.8.0_65


Problema resolvido!

Criando o JAVA_HOME
O Java já está funcionado na linha de comando, mas existem outras ferramentas do mundo Java que também querem saber onde o Java foi instalado. E essas ferramentas acreditam tanto que a gente instalou o Java que elas simplesmente assumem a existência de uma variável de ambiente com nome JAVA_HOME.

Ok, tudo bem, vamos criar essa variável usando o setx, já para a deixarmos permanente. Só devemos ter um cuidado: o JAVA_HOME aponta para o diretório raiz do Java (sem a pasta bin):

setx JAVA_HOME "C:\Program Files\Java\jdk1.8.0_65" /M


Fechando e abrindo o terminal, podemos testar a variável:

echo %JAVA_HOME%
 C:\Program Files\Java\jdk1.8.0_65


O que aprendemos
O que são as variáveis de ambiente
Mostrar as variáveis de ambiente pelo comando set
A importância da variável PATH
Alterar a variável PATH com set e setx
Criar novas variáveis de ambiente
Descobrir a arquitetura do sistema (32bit ou 64bit)
Instalar o JDK do Java
Configurar o PATH para usar o comando javac no prompt
Configurar a JAVA_HOME

Como neste capítulo e exercícios vamos alterar bastante o PATH do Windows, é bom criarmos um arquivo de backup do seu PATH original, antes de começarmos a alterá-lo, assim caso você faça alguma modificação por engano você conseguirá restaurá-lo para sua versão que funcionava.
Então antes de executar qualquer alteração do seu PATH, execute o comando abaixo para salvar um backup:

echo %PATH% > backupPATH.txt
Salve o arquivo backupPATH.txt em um local seguro que você vá se lembrar!

É sempre importante guardamos informações importantes do sistema, antes de qualquer modificação. Neste capítulo você vai aprender a alterar o PATH tanto através da linha de comando como a ferramenta visual RapidEE no exercício extra, mas mesmo assim é sempre bom estar preparado para o pior caso você encontre algum bug!

Qual comando mostra todas as variáveis de ambiente na linha de comando?

O comando set mostra todas as variáveis na linha de comando:
set
Como vimos o set também serve para alterar uma variável existente ou criar um nova, por exemplo:

set EAD=Alura
Lembrando que esta alteração só dura enquanto o terminal estiver aberto!

No exercício anterior vimos como criar uma nova variável de ambiente:
set EAD=Alura
Como podemos imprimir o conteúdo dessa variável no prompt?

Para acessar a variável devemos usar %NOME_DA_VAR%, no nosso caso:
echo %EAD%
É muito comum construir um caminho a partir de variáveis já existentes. Por exemplo, já existe uma variável com o nome USERPROFILE que guarda o caminho para pasta home do usuário. No meu computador é:

echo %USERPROFILE%
C:\Users\caelum
O home do usuário é C:\Users\caelum. Sabendo dessa variável podemos navegar para nossa pasta de código usando:

cd %USERPROFILE%/codigo
Teste isso agora! Assim podemos construir um caminho baseado nessa variável, ok?

Qual é diferença entre set e setx, já que os dois comandos podem alterar variáveis de ambiente?

As variáveis alteradas pelo set servem apenas enquanto o prompt está aberto,já o setx altera permanentemente!

A diferença é que o setx altera as variáveis permanentemente, enquanto o set serve apenas enquanto o terminal está aberto. Lembrando que devemos sempre o usar o setx com a flag /M se quisermos que a alteração seja permanente.
Outra diferença é que com o comando set podemos imprimir todas as variáveis de ambiente.

Para configurar uma variável de ambiente permanente, devemos usar o comando setx.
O comando setx deve ser usado sempre no prompt de comando original do Windows, e sempre em modo de administrador.

Seu uso correto fica assim:

setx PASTA_CODIGO "C:\Users\caelum\codigos" /M

O setx não possui o sinal de igual, e o conteúdo da variável deve ficar entre aspas. Não podemos esquecer também da importante flag /M, que indica que estamos criando uma variável do sistema.

Sobre as afirmativas abaixo, julgue quais são as verdadeiras:
1- Sem a flag /M o comando setx não altera as variáveis do sistema.

2- A variável de ambiente que contém a arquitetura do seu sistema é a SYSTEM_ARCHITECTURE .

3- Utilizar apenas o comando setx puro no prompt exibe todas as variáveis de sistema.

4- Uma outra maneira de exibirmos a variável PATH é através do comando set PATH.

Comentando as afirmativas:
O comando setx necessita da flag /M para alterar as variáveis do sistema, então a primeira afirmativa é verdadeira.

A variável de ambiente que contém a arquitetura do sistema é a PROCESSOR_ARCHITECTURE e não a SYSTEM_ARCHITECTURE, então a segunda afirmativa é falsa.

O comando que exibe todas as variáveis de ambiente quando executado sozinho é o set e não o setx, então a terceira afirmativa é falsa

E por último, se você testou no seu Cmder, um outro jeito de exibir uma variável de ambiente é utilizando o comando set e o nome da variável em seguida, como no caso do set PATH, logo a quarta afirmativa é verdadeira.

O que nos deixa com a resposta:

Apenas as afirmativas 1 e 4 são verdadeiras.

E aí, acertou ?

Podemos alterar as variáveis de ambiente, como o PATH pela interface gráfica do Windows. Vou mostrar como:
Clique no ícone Pesquisar e digite Painel de Controle
Clique em -> Painel de Controle -> Sistema de Segurança -> Sistema-> Configurações Avançadas
Na aba Avançado das Propriedades do sistema clique em Variáveis de Ambiente,
Em Variáveis do Sistema localize PATH e clique nele.
Na janela Editar você pode modificar o PATH adicionando a localização da classe para o valor de PATH.
Para ver as alterações feitas no PATH é preciso reabrir o mesmo (não precisa reiniciar).

Depois de todos esses cliques e janelas diferentes (que até mudam entre versões do Windows) você não acha mais fácil usar o comando setx?
Claro que vai muito pelo gosto mas um pouco de conhecimento sobre o prompt ajuda no dia a dia do desenvolvedor. Saiba que você está preparado para instalar e configurar as ferramentas mais comuns no Windows.

Vamos continuar?

Vimos no video que há duas versões do JDK (Java Development Kit), para 32bit (x86) e 64bit.
Usamos a variável de ambiente PROCESSOR_ARCHITECTURE para descobrir a arquitetura do sistema:

echo %PROCESSOR_ARCHITECTURE%


No entanto, existe uma alternativa na linha de comando para descobrir a arquitetura do processador. Tente executar no prompt do cmder:

wmic OS get OSArchitecture
E a saída é até um pouco mais bonita:

Tente executar o último comando no cmder!

wmic é um comando que dá acesso ao Windows Management Instrumentation. O wmic é mais importante para administradores de infraestrutura e possui muito mais funções. Para gente basta saber se é 32bit ou 64bit!

Bom, já que estamos usando o Windows, será que não tem uma forma de descobrir a arquitetura através do Windows mesmo? Ou seja, sem o prompt?
Claro que tem, mas vai dar um pouco mais trabalho :)

Acesse o Painel de Controle (ou Configurações no Windows 10) e clique no Sistema para Ver o nome do computador. Depois clique no Sobre. Nessa tela também encontramos a informação sobre x86 (32bit) ou x64 (64bit).

Dica: Se seu teclado tiver a tecla Pause, pode usar o atalho Windows + Pause.

Isso é um bom exemplo que mostra o poder do prompt. Dá muito mais trabalho navegar entre as janelas do que digitar um comando no prompt. Outra vantagem do prompt é que esses comandos mudam com muito menos frequência do que as janelas do Windows.
A grande desvantagem é que não podemos exigir do um usuário comum executar comandos no prompt. Mas a gente, sendo ou se tornando desenvolvedor, pode encarar a linha de comando!

Como se chama a variável de ambiente que algumas ferramentas do mundo Java exigem?

É o JAVA_HOME!
Algumas ferramentas precisam dessa variável de ambiente para encontrar as bibliotecas do Java. Alguns exemplos de ferramentas são: ANT, Maven, Gradle ou Tomcat. Não se preocupe se você não conhece nenhuma dessas ferramentas. Para isso há outros treinamentos nas trilhas Java.

Você pode verificar a existência da variável pelo comando:

echo %JAVA_HOME%
Ou simplesmente imprimir todas as variáveis pelo comando set.

Quais comandos devemos utilizar no terminal para verificar se possuímos o Java e o compilador de Java no computador, mostrando com as suas versões ?

Para verificarmos a versão do Java e de seu compilador, devemos utilizar os comandos java -version e javac -version, respectivamente.
Vale lembrar também que devemos verificar se a variável de ambiente JAVA_HOME está configurada, já que muitas ferramentas do Java dependem dela. Fazemos isso através do comando:

echo %JAVA_HOME%

Unindo o que aprendemos nos capítulos anteriores com o nosso conhecimento atual sobre como configurar o Java, qual é o comando correto para configurar a variável de ambiente JAVA_HOME, supondo que tenhamos instalado o Java na pasta C:\Program Files\Java\jdk1.8.0_65 ?

setx JAVA_HOME "C:\Program Files\Java\jdk1.8.0_65" /M

Como queremos que a variável JAVA_HOME seja permanente, devemos usar o comando setx. E lembrando que o comando setx não utiliza o sinal de =, então a resposta correta seria: setx JAVA_HOME "C:\Program Files\Java\jdk1.8.0_65" /M

Como você viu neste capítulo, no Windows nós temos diversas váriaveis de ambiente, que nos fornecem várias informações diferentes sobre o nosso sistema. Vimos que para altera-las, podemos utilizar o prompt de comando, mas agora quero lhe mostrar um pequeno programa que nos permite altera-las de um modo um pouco mais visual. Este programa é RapidEE:
Programa RapidEE

Ele é um editor de variáveis de ambiente, que usa a interface gráfica para exibir tanto as váriaveis ambientes do sistema (lado esquerdo), como as variáveis ambientes do usuário (lado direito).

Para fazer sua instalação, basta acessar o site http://www.rapidee.com/en/download e escolher a opção Download RapidEE_setup.exe.

Programa RapidEE Download

A instalação é bastante simples, bastando apenas seguir o instalador.

Com ele instalado, podemos fazer as operações como editar, modificar e criar novas variáveis atráves de sua interface.

Criando novas variáveis
Para adicionar uma nova variável, basta clicar com o botão direito e selecionar Add Variable. Aperecerá uma caixinha com o nome da váriavel que você deseja criar, e a opção de selecionar o contéudo como uma String normal ou Expanded String. A diferença é que devemos usar Expanded String quando queremos usar uma váriavel que refêrencia outra, por exemplo caso queiramos criar uma váriavel chamada PASTA_TEMP , que tenha o valor %TEMP% , referenciado o valor da váriavel TEMP.

Editando variavéis
Para editar o valor de alguma variável, basta expandir seu conteúdo clicando no simbolo de + ao lado do nome dela, e dar um duplo clique no valor que desejámos alterar. Editando variáveis

Adicionando novos valores
Para adicionar novos valores, clicamos com o botão direito na variável que queremos alterar e selecionamos a opção Add value.... Podemos escrever o caminho na mão, como faziamos no prompt, ou selecionar entre as opções Insert directory path... e Insert file path... , para inserir uma pasta ou um arquivo, respectivamente, através do sistema de janelas do Windows.

Inserindo variáveis

Removendo duplicatas e variáveis em branco
Quando estamos alterando o PATH, podemos cometer algum erro , como inserir duas vezes a mesma variável ou inserir uma variável em branco, e isto é um pouco difícil de detectar quando estamos na linha de comando, pois se o PATH for muito grande, pode ficar difícil de notar algum descuido nosso.

Ferramenta CleanUpPaths

O RapidEE tem uma função que corrige isto automaticamente para gente, é a Cleanup Paths , que remove valores repetidos e valores em branco. Para usa-la basta clicar com o botão direito em cima de uma variável e seleciona-la, veja só:

Ferramenta CleanUpPaths

Repare que na imagem acima, temos a pasta C:\Users\caelum\bin adicionada diversas vezes, e inclusive temos um valor em branco. Vamos corrigir isto com o Cleanup Paths :

Path Limpo

Bem fácil de organizar nosso PATH, não é mesmo ?

Detectando caminhos inválidos.
Um outro erro bastante comum quando estamos instalando programas ou alterando a variável PATH é que acabamos criando certos caminhos inválidos. O rapidEE detecta isto para a gente e coloca esses caminhos em vermelho:

Caminho Inválido

Ficando muito fácil de identificá-lo, agora basta selecionarmos o caminho inválido e apagá-lo com a tecla delete do seu teclado :) .

Salve suas modifcações!
Uma coisa importante ao utilizar a ferramente rapidEE é lembrar de salvar as alterações antes de fecha-la, clicando no pequeno ícone de salvar da barra de ferramentas dele.

Botão salvar

Ele dá um pequeno aviso caso você tente fechar sem salvar, mas é bom te informar com antecedência para você não se esquecer!

Como você já deve ter notado, é muito importante ter o conhecimento dos comandos do prompt, porém para quem é iniciante neste mundo existem essas ferramentas visuais que nos dão um suporte caso não estejamos totalmente confiantes nas alterações que fizemos pelo prompt.
O rapidEE além de nos permitir visualizar nossas variáveis de ambiente, também é muito útil para debugar problemas na variável PATH , removendo suas entradas duplicadas com o Cleanup Path e marcando em vermelho as entradas inválidas que por acaso podem ter sido adicionadas lá sem querer. Afinal, até os desenvolvedores mais experientes cometem erros, não é mesmo ?

Guarde mais este conhecimento na sua caixa de ferramentas mental que tenho certeza que um dia ele pode vir a ser útil com você :)

############### 4. Gerenciando pacotes com Chocolatey ###############

Instalando o chocolatey
1- O primeiro passo para a instalação do chocolatey é abrir o cmd em modo administrativo, ou seja precisamos clicar com o botão direito em cima dele em seguida clicar em executar como adminsitrador:

Abrindo cmd em modo administrativo

2- Em seguida precisamos colar o código de instalação do chocolatey no prompt em modo de administardor. Copie e cole a instrução abaixo em seu prompt e dê um enter:

@powershell -NoProfile -ExecutionPolicy Bypass -Command "iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))" && SET "PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin"
Colando o código de instalação do chocolatey

Agora você deve aguardar um pouco, pois a instalação do chocolatey pode ser um pouco demorada pois ele baixa todas as dependências do site.

3- Repare que o cholatey avisa em amarelo que precisamos fechar e abrir o prompt para que o chocalatey funcione após a instalação. Aviso do chocolatey

4- O fim da instalação é quando você visualizar a tela abaixo: Final da instalação do chocolatey.

5- Ao final da instalação você deve fechar e abrir o prompt novamente em modo de administrador, para que possamos usar o chocolatey. Faço isto novamente:

Abrindo cmd em modo administrativo

6- Para verificar se ocorreu tudo bem com a instalação, execute um simples comando do chocolatey, como o comando choco -v que verifica a versão dele:

Chocolatey instalado com sucesso

Se a versão apareceu como na imagem acima, significa que você conseguiu instalar o chocolatey com sucesso!

É valido lembrar também que sempre que você quiser utilizar o chocolatey você deve abrir o prompt de comando em modo administrativo.

Play Store para Windows
Hoje de manhã eu instalei um novo aplicativo em meu celular. Eu uso Android e, como de costume, acessei o Play Store do Google, procurei pelo aplicativo e pedi para instalar. Foi muito fácil!

Agora tenho algumas perguntas: na hora de instalar o aplicativo no Android é preciso acessar o site do fabricante do aplicativo para baixar? Não. Usamos o Play Store sempre. Uma outra pergunta: para instalar o aplicativo corretamente é preciso configurar o PATH ou uma outra variável de ambiente? Claro que não, isso é feito automaticamente!

Então a pergunta final é: Por que não faremos a mesma coisa na hora de instalar as ferramentas e aplicativos no Windows? Não seria muito melhor para o usuário final? Com certeza, e a noticia boa é que existe algo parecido com o Play Store no Windows também! Nesse "store" não há todas os aplicativos do mundo que poderiam rodar no Windows, mas lá está maioria das ferramentas e aplicativos para o desenvolvedor.

Gerenciador de pacote
A ideia de se ter uma ajuda para instalar um software no sistema operacional é muito antiga e não foi inventada pelo Google ou pela Apple. No mundo Linux existem há décadas aplicativos que se preocupam com a instalação e administração de outros aplicativos. Esses aplicativos são os Gerenciadores de Pacote ou, em inglês, Package Managers. Então sempre que queremos instalar um software vamos utilizar um gerenciador de pacotes. Ele que se preocupe com o download do software, como e onde extrair, qual é a pasta certa de instalação, qual versão e quais são as dependências. É muito muito útil!

Chocolatey, um gerenciador de pacote para Windows
Chocolatey é uma ferramenta para a linha de comandos para instalar e administrar softwares. Ele segue a mesma ideia dos package-managers, como apt-get, rpm, entre vários outros no mercado. A grande diferença é que o Chocolatey é para Windows! Para aqueles não familiarizados com o APT / Debian, pense no Chocolatey como um instalador silencioso global para aplicativos e ferramentas.



No mundo Windows, o Chocolatey ficou muito popular entre desenvolvedores. O site dele é o https://github.com/chocolatey/choco/wiki e lá também encontramos informações como instalá-lo: https://github.com/chocolatey/choco/wiki/Installation .



Na seção Commmand Line encontraremos o comando para instalar o Chocolatey:

@powershell -NoProfile -ExecutionPolicy Bypass -Command "iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))" && SET "PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin"
O comando pode dar um frio na barriga, mas na verdade ele não faz nada além de usar o PowerShell (aquele outro prompt mais poderoso para admins de infraestrutura) para baixar o instalador e colocar a pasta bin no PATH - só que tudo em uma linha só.

Vamos abrir o cmd, mas dessa vez com os privilégios de um administrador.

Botão direito em cima do executável do cmd e Executar como administrador. Depois da confirmação, abre-se o terminal.



Com o terminal aberto, vamos colar o comando para instalar o Chocolatey:

@powershell -NoProfile -ExecutionPolicy Bypass -Command "iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))" && SET "PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin"


Obs: A instalação do Chocolatey pode demorar um pouco, pois é necessário baixar todas as dependências. Mas vale a pena a espera!

Trabalhando com Chocolatey
Uma vez que o Chocolatey foi instalado, podemos usá-lo para instalar Java, Ruby, Python ou qualquer outro pacote que ele dá suporte. Há mais de 3000 pacotes disponíveis. A sintaxe básica é:

choco install <nome-do-pacote>
Mas como vou saber o nome do pacote? Vamos dar uma olhada no site: https://chocolatey.org/

No menu principal já existe um link que vai nos ajudar: Packages.



Ao clicar no link encontramos uma busca. Vamos buscar por Python. O resultado mostra o nome do pacote encontrado e o comando para instalá-lo:



Por exemplo, para instalar o Python 2.7 usamos :

choco install  python2
Para Python 3.4

choco install  python3
O comando choco baixa, instala e configura o ambiente! Fácil não?

Vamos ver mais um exemplo, instalando nodejs. Novamente vamos pesquisar:



A única versão encontrada é o 5.x. Para quem conhece um pouco sobre o Node JS, sabe que as versões ímpares tem um tempo de suporte menor do que as versões pares. Por isso, é muito comum usar a versão 4. Mas como vou instalar essa versão um pouco mais antiga? Vamos seguir o link da versão atual:

https://chocolatey.org/packages/nodejs.install

Navegando um pouco para baixo encontramos um histórico de versões, e lá podemos ver a última versão 4:



Clicando na versão 4.2.2 encontramos o comando para instalá-la:

choco install nodejs.install -version 4.2.2
Repare aquela flag -version que indica a versão. Agora estamos aptos a instalar qualquer pacote do Chocolatey!

Dica: Ao instalar um pacote, o Chocolatey pede uma confirmação, podemos indicar que queremos confirmar já no comando inicial, por exemplo

choco install -y nodejs.install -version 4.2.2
Removendo um pacote
Remover um pacote é tão fácil quanto instalar, basta digitar:

choco uninstall <nome_do_pacote>
Abaixo seguem os comando para instalar as plataformas mais comuns de desenvolvimento. Divirta-se com o Chocolatey!

Instalando JDK 8
choco install -y jdk8
Instalando JDK 7
choco install -y jdk7
Instalando Python 2.7
choco install -y python2
Instalando Python 3
choco install -y python
Instalando nodejs 4
choco install -y nodejs.install -version 4.2.2
Instalando Ruby e Rubygems
C:\> choco install -y ruby rubygems
Como o Rails possui muitas dependências, foi criado um instalador independente do Chocolatey que facilita mais ainda a instalação:

http://railsinstaller.org/en

Instalando Git
choco install -y git
Instalando MySQL
choco install -y mysql
Instalando PHP
choco install -y php
O que aprendemos?
O que é um gerenciador de pacotes.
Instalar o chocolatey, o gerenciador de pacotes para o Windows.
Como instalar programas e ferramentas com apenas um comando.
Especificar a versão correta dos programas.
Remover pacotes com o chocolatey.
Como instalar a JDK, python, Node, Ruby, Git, PHP e muitos outros.

Qual comando devemos utilizar quando queremos instalar um programa com o gerenciado de pacotes chocolatey?

choco install <nome_do_pacote>
Apesar da ferramenta se chamar chocolatey, para usá-la na linha de comando devemos usar o comando choco, que é até bem mais fácil de digitar. Então, para fazer uma instalação usando o chocolatey, devemos utilizar o:
choco install <nome_do_pacote>

Vimos que é bem fácil instalar um programa através do chocolatey, mas e se desejarmos escolher uma versão específica do programa, qual dos comandos abaixo nos atende?

Tanto a opção: choco install <nome-do-pacote> -version <versão-do-pacote> quanto a opção: choco install -version <versão-do-pacote> <nome-do-pacote> estão corretas. Para instalarmos uma versão específica de um programa, devemos utilizar a flag -version e em seguida a versão que desejamos.O nome do pacote pode vir antes ou depois.

Quando estamos instalando um programa com o comando choco install , podemos utilizar a flag -y ao final do comando. Descreva no campo abaixo o que esta flag faz quando é utilizada em conjunto do comando choco install.

Quando instalamos um pacote com o choco install , ele pede algumas confirmações , que devemos aceitar para poder confirmar que queremos realizar a instalação. A flag -y faz com que essas confirmações sejam aceitas automaticamente, fazendo com que não tenhamos que nos preocupar em verificar a instalação e aceitar repetidas vezes as confirmações.

Qual o único pré-requisito que devemos cumprir quando queremos instalar um novo pacote com o Chocolatey?

Executar o prompt em modo de administrador.
Quando queremos instalar algo com o Chocolatey o único cuidado que devemos ter é executar o prompt em modo de administrador, pois como estamos instalando pacotes são necessárias certas permissões que só o prompt em modo de administrador possui.
Lembrando que os comandos do Chocolatey funcionam tanto no Cmder quanto no prompt de comando normal do Windows, é questão de gosto! E a flag -y é opcional no comando choco install nome-do-pacote, só que sem ela vamos ter que aceitar as perguntas que o Chocolatey faz manualmente.

O Chocolatey possui um comando para remover os pacotes instalados previamente, com o nome muito parecido com o comando de instalação. Digamos que tenhamos instalado o pacote python2, qual comando nós devemos utilizar para remover o pacote ?

Para desinstalar um pacote podemos usar o comando choco uninstall nome-do-pacote, no nosso caso ficando:
choco uninstall python2

A remoção do pacote é tão rápida quanto a instalação :)

E caso você não se lembre todos os pacotes que tem instalados em seu computador, o comando choco list -l exibe-os para você!

Vimos no treinamento que podemos verificar os pacotes disponíveis baixados através do site do chocolatey, porém também é possível fazer isto pela linha de comando! O comando choco list lista todos os pacotes que podem ser instalados pelo chocolatey mas antes de executa-lo tome cuidado por quê o chocolatey possui milhares de pacotes e seu computador vai passar um bom tempo listando-os! Para executar uma busca por pacotes mais específica, podemos utilizar o comando choco list com um nome do pacote que queremos buscar, por exemplo:
choco list git

Isto nos exibirá diversos pacotes que tem possuem git no nome ou em suas dependências! Bem mais fácil do que procurar o pacote desejado em uma lista gigantesca, não é mesmo?

Pacotes locais
Uma outra opção de uso do choco list é para listar os pacotes locais que foram instalados pelo chocolatey, para isso basta usarmos a flag -l deste modo:

choco list -l Ele exibe uma lista de todos os pacotes do seu computador! Muito útil quando queremos saber quais pacotes e suas versões que possuímos instalados.

choco search ?
Você pode acabar encontrando na internet pessoas utilizando o choco search para fazer buscas, de um jeito muito semelhante ao que foi ensinado aqui, e se perguntando qual é a diferença. A resposta é: Nenhuma! O choco search é um comando análogo ao choco list e ambos fazem a mesma coisa debaixo dos panos. Eles são intercambiáveis entre si e tudo que você pode passar como argumento em um, pode usar no outro também! Então não se preocupe, os dois fazem a mesma coisa :)

Podemos usar o comando choco list para exibir tanto os pacotes que possuímos instalados localmente, quanto os disponíveis para serem instalados. Lembrando sempre de colocar o nome do pacote que você quer buscar, quando for buscar por um pacote que quer instalar:
choco list <nome_do_pacote>

Para listar os pacotes localmente usamos a flag -l, por exemplo executando choco list -l no meu computador trouxe o resultado:

chocolatey 0.9.9.11
git 2.6.4
git.install 2.6.4
jdk7 7.0.79.1
jdk8 8.0.66
nodejs 5.3.0
nodejs.install 4.2.2
ruby 2.1.6
E lembre-se que o choco search é análogo ao choco list , os dois fazem a mesma coisa!

O mundo Windows demorou muito para usar um gerenciador de pacote mas hoje em dia até existe um gerenciador nativo. Nativo significa que vem configurado com o Windows, mas apenas com Windows 10. O Gerenciador se chama OneGet e deve ser utilizado no PowerShell do Windows.
Mais informações sobre o OneGet na página do projeto:

https://github.com/OneGet/oneget/wiki/cmdlets

Assim como existe o chocolatey para Windows, no mundo Linux nós temos o apt-get. O apt-get também um gerenciador de pacotes, e inclusive foi ele que inspirou a criação do chocolatey. Ele já vem por padrão nas distribuições mais comuns do Linux, como o Ubuntu e o Mint e do mesmo modo do chocolatey, facilita muito nossa vida quando queremos instalar programas no Linux
Já quando desenvolvemos aplicações, por exemplo usando Java, é muito comum usarmos código (dependências) de outros desenvolvedores no nosso código para ajudar em alguma tarefa. No mundo Java possuímos algumas ferramentas que nos ajudam a baixar e a lidar com essas dependências como o maven, ivy e o gradle. Elas agilizam o processo de desenvolvimento, já que com um pequeno código, qualquer desenvolvedor que baixar nossa aplicação pode baixar as dependências do mesmo e ter o projeto funcionando rapidamente.

Como desenvolvedor, é bom ter conhecimento das diversas ferramentas que existem por aí para facilitar nossa vida. Os gerenciadores de dependência são apenas um tipo delas, e mesmo não utilizando todas elas no dia a dia, é uma boa prática estar sempre atualizado em relação as tecnologias dos sistemas operacionais e linguagens mais comuns do mercado.

############### 5. Comandos do Linux bash no Windows ###############

Nos treinamentos do Alura a grande maioria dos instrutores não usa Windows. Realmente, os sistemas UNIX são mais populares entre os desenvolvedores. Então você precisa se preocupar em instalar alguma distribuição Linux? Claro que não, o Windows vai te atender muito bem!
A popularidade dos sistemas UNIX entre os desenvolvedores é porque a Microsoft, por muitos anos, não deu muito valor ao mundo do software de código aberto e ficou apenas focado em seus produtos. Por isso, os desenvolvedores usaram alternativas para poder utilizar open source. Isso mudou e hoje em dia a Microsoft é uma das empresas comprometidas com o mundo open source. Ou seja, as ferramentas e plataformas de código aberto vão funcionar no Windows também.

Neste capítulo quero mostrar para você as diferenças entre o terminal do mundo UNIX e o do mundo Windows. Vamos lá?

Instalando Cmder com Chocolatey
Vou abrir o nosso velho prompt do Windows para instalar o Cmder por Chocolatey. Nós já tínhamos baixado o Cmder no capítulo anterior, mas sem o Chocolatey. O pacote tem o mesmo nome da aplicação, então basta digitar:

choco install cmder
Já podemos abrir o Cmder. Fechando e reabrindo o prompt, digite:

cmder
Comandos Bash no Windows
Nós gostamos do Cmder pois dá uma cor para o terminal, porém ele vai além disso. O Cmder simula os comandos do mundo UNIX no Windows! Ou seja, além de ser um prompt do Windows também podemos executar os principais comandos da BASH (assim se chama o interpretador de comandos no mundo UNIX).

Vamos deixar o prompt e o Cmder aberto para comparar os dois.

A navegação entre as pastas é praticamente igual no mundo Windows e UNIX. A principal diferença é que no Windows usamos \ e no UNIX /. Mas repare que no Cmder e até no prompt a barra funciona.

Porém existe uma diferença de nomenclatura que faz com que um comando não funcione no Cmder: no mundo UNIX o caractere ~ significa a pasta pessoal ou home. Então não podemos testar isso nesse ambiente, Mas vocês sabem agora que cd ~ navega para pasta home do usuário.

Listando arquivos
Outra diferença é como listar o conteúdo de uma pasta. No prompt vimos o dir mas no mundo UNIX usa-se o comando ls (ls de listar). Vamos testar no cmder:

ls
Também há duas opções (flags) muito úteis para listar todos os arquivos incluindo os escondidos, além de mostrar todos os atributos de um arquivo:

ls -al


Esses comandos são muito utilizados nos videos de outros cursos.

Copiando, movendo e removendo arquivos
No prompt usamos os comando copy, move, del e rmdir. No mundo UNIX é bem parecido e temos cp, mv, rm e rmdir. Vamos testar rapidinho no Cmder:

ls > saida.txt
cp saida.txt saida2.txt
rm saida.txt
mv saida2.txt codigo
cd codigo
ls
mkdir teste
rmdir teste


Perfeito! O Cmder dá suporte aos mesmos comandos do mundo UNIX!

Mostrando o conteúdo
Para mostrar o conteúdo na linha de comando já aprendemos o comando type. O comando mais comum no UNIX é cat. Vamos testar:

ls -al > arquivos.txt


O comando cat também funciona no cmder!

Buscando por palavras
Há um comando muito útil para encontrar uma palavra dentro de um texto maior. Esse comando se chama grep, só que ele não existe no prompt! Será que o Cmder conhece? Vamos testar:

grep
Aparentemente funciona. Vamos testar listar todos os arquivos para depois encontrar a palavra Doc

ls -al | grep Doc
Repare que usamos um | para passar a saída do comando ls -al para o comando grep. Isso não só funciona com o comando ls, mas também com todos os outros comandos que possuem uma saída.

Resumindo
Se em alguma aula o professor estiver usando um terminal, saiba que o Cmder vai atender você. Podemos usar os mesmos comandos do professor, mesmo usando Windows. Assim fica muito mais fácil de acompanhar os videos no Alura. Vamos praticar um pouco?

O que aprendemos?
Comandos do Linux bash no Windows
Como habilitar os comandos do Linux bash no Windows
Como instalar a versão completa do Cmder
Os comandos ls, rm, rmdir, mv, cp, cat.
As diferenças entre os comandos de Windows e de Linux
Buscar dados com o comando grep

Qual dos comandos abaixo não funciona no prompt padrão do Windows?

O comando ls não funciona no prompt padrão do Windows! O ls é a abreviação para listar e mostra tudo o conteúdo de uma pasta.
Por exemplo, podemos listar e ordenar pela data de modificação:

ls -lt
Podemos mostrar o tamanho dos arquivos e kB e MB:

ls -lth
E ordenar pelo tamanho:

ls -lSh
São muitas as opções, e você pode ver todas elas usando:

ls --help

E agora contrário: Qual dos comandos abaixo funciona no Windows prompt padrão?

type
O comando type é um dos comandos clássicos do prompt do Windows, ou seja funciona sem problemas nenhum e mostra o conteúdo de um arquivo:
type arquivo.txt
Todos os outros comandos só vão funcionar no cmder.

Com qual comando podemos buscar na linha de comando dentro de um texto?
Dica: O comando só vai funcionar no cmder pois vem do mundo UNIX.

O comando grep procura na entrada de dados, mostrando as linhas onde foi encontrado a palavra em questão, por exemplo:
ls -al | grep Documentos
Nesse exemplo combinamos ls -al com grep. Usamos o | para juntar os comando.O sinal | também é chamado de pipe.

ls -al lista todo o conteúdo da pasta atual e passa isso como entrada para o comando grep. Em cada linha dessa entrada o grep procura a palavra Documentos.

Podemos combinar o grep com outros comando como o cat:

ls -al > arquivo.txt
cat arquivo.txt | grep Documentos

Qual comando no UNIX exibe o conteúdo de um arquivo no terminal ?
(Dica: é um comando parecido com o type do windows)

O comando cat serve para exibir um arquivo no terminal. Ele se parece com o comando type do Windows, então ao fazer:
cat arquivo.txt

O conteúdo do arquivo.txt é exibido na tela do terminal.

Sabemos que o comando ls lista os arquivos do diretório atual, porém não lista os arquivos ocultos. Com que flag devemos chamar o comando ls para listar todos os arquivos do diretório, inclusive os ocultos?

ls -al
Para listar todos os arquivos do diretório atual, devemos utilizar a flag -al ("a" de all e "l" de list) , assim todos os arquivos serão exibidos em formato de lista.
Por curiosidade:

A flag -hl transforma as unidades de tamanho em um formato mais amigável, por exemplo 4K em vez de 4096.

A flag -rl lista os arquivos em ordem reversa a normal.

A flag -sl lista os arquivos por ordem de tamanho.

Usando a flag --help do comando ls você pode ver várias outras opções de como listar seus arquivos!

Como o cmder é um prompt muito versátil, nada mais justo do que ter um jeito fácil de acessá-lo, não é mesmo? Para isso, vamos criar um atalho para a versão full do cmder que instalamos neste capítulo. Assim evitamos aquele processo de abrir o prompt de comando tradicional para chamar o cmder.
Primeiro, vá na pasta C:\tools\cmder\. Lá você deve encontrar a versão full do cmder, que foi instalado pelo chocolatey. Para criar um atalho dela, basta clicar com o botão direito do mouse no ícone do cmder, e depois ir em Enviar para , selecionando Área de Trabalho (criar atalho) em seguida.

atalho-cmder

Outra opção é deixá-lo fixado na barra de tarefas. Quando você estiver executando o cmder, clique com o botão direito no ícone dele que fica na barra do menu iniciar e clique em Fixar na barra de tarefas, assim, mesmo que você feche-o , ele estará logo ali embaixo, sendo bem rápido de acessar.

atalho-cmder

Pronto! Agora temos a versão full do cmder disponível na Área de trabalho e na barra de tarefas.


