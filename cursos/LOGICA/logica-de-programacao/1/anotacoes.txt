################# 1. Comece a programar hoje #################

Não importa sua idade, profissão e objetivo: programar é mais do que divertido, é um constante desafio. Queremos tornar o programa mais rápido, mais legível, mais elegante e mais útil. Prepare-se para encontrar problemas, quebra-cabeças e questões o tempo todo.
Seu aprendizado aqui será útil não apenas para começar a criar uma página web. Você estará preparado a enfrentar as fórmulas do Excel, desenvolver suas próprias pequenas ferramentas, entender o funcionamento das aplicações que utiliza na internet e quem sabe criar um programa para seu próprio celular e dos seus amigos.

O segredo, sem dúvida, é praticar. Não se limite apenas com os exemplos e exercícios do livro. Vá além, deixe sua curiosidade guiar a criação de novos programas.

Siga os capítulos passo a passo. Assim que começar a aprender mais, ofereceremos exercícios e desafios oficiais. Não fique apenas na leitura! A prática é o segredo. Faça todas as sugestões e veja você mesmo o resultado. Caso fique curioso, troque os dados, modifique as rotinas, experimente, invente. A programação nos dá esse poder de criação. Crie!

Converse com seu navegador
Há muito o que aprender. O mais importante é que você possa rapidamente escrever seus próprios programas e depois executá-los para ver o resultado. Existem muitas linguagens de programação, e todas são alternativas viáveis para um primeiro contato. Escolhemos uma linguagem para você: o JavaScript, que possui vantagens e desvantagens como todas as outras, mas para o aprendizado ela é muito adequada: não haverá necessidade de instalar nada para começar a programar.

Abra uma página qualquer. Pode ser o site da casa do código, http://www.casadocodigo.com.br, pode ser o site da Caelum, http://www.caelum.com.br ou do seu portal preferido. Para fazer isto, você utilizou algum navegador (browser), como o Internet Explorer, o Firefox e o Chrome, mas como ele fez toda essa mágica de mostrar essa página bonita para nós?

Na realidade, não há mágica nenhuma envolvida nisso. O navegador apenas obedece à instruções que alguém deu para ele. Alguém disse para ele que aquelas imagens deveriam aparecer, que determinados textos precisavam ser exibidos, que a cor de fundo da página é algum tom de cinza, que quando você clica em um botão, uma mensagem surge para você e assim por diante.

Quem fez isso? O programador, muitas vezes também chamado de desenvolvedor. Que é justamente quem sabe dar as instruções para o navegador realizar. Todos esses navegadores vão pegar essas instruções, na forma de um código e irá apresentá-lo na tela de uma forma agradável. O que viria a ser um código?

Nesse mesmo site que você entrou, vamos ver qual foi o código utilizado. Para isso, você deve seguir passos diferentes de acordo com o navegador.

No Chrome, clique no ícone da ferramenta, depois Ferramentas e Exibir código fonte. CTRL+U é o atalho para isso.

No Firefox, clique no botão do menu, desenvolvedor web e depois código fonte. CTRL+U também funciona nesse navegador.

No Internet Explorer 9, dê um clique com o botão direito no fundo da página e escolha Visualizar código fonte.

Parece complicado? O navegador (browser), pegou todo esse código e gerou aquela representação, agradável aos nossos olhos. Podemos nós mesmos criar algo assim para apresentar os dados que desejarmos. Isto é, podemos criar nossa própria página, que vai interagir com quem a estiver acessando, o usuário.

Criando seu próprio arquivo HTML
Para criar nosso primeiro código, abra um editor de texto comum, como o Bloco de Notas (Notepad) do Windows ou o gedit do Linux. Editores de texto como o Word não ajudam muito neste caso, pois eles gravam o arquivo de uma forma diferente da qual o seu navegador está preparado. Digite o seguinte texto:

Meu primeiro teste!
<h3>Seria isso um programa?</h3>
Salve o arquivo em uma pasta de fácil acesso, como Meus Documentos ou a própria Área de Trabalho (Desktop), com o nome minha_pagina.html.

Vá ao diretório onde você gravou o arquivo, dê dois cliques sobre ele. O seu navegador abrirá.

Um arquivo HTML nos permite não apenas apresentar informações que foi colocada dentro dele. Podemos realizar operações, pedir informações e executar comandos. Veremos isso em breve.

Um pouco mais de HTML
Nossa página, por enquanto, só exibe textos fixos (chamado de conteúdo estático). Podemos alterá-la para exibir informações diferentes, usando tags para mudar a forma com que os dados são representados. Abra novamente seu arquivo html. Você pode até deixar o editor aberto o tempo inteiro, pois modificaremos o arquivo com frequência. Vamos alterá-lo:

Meu primeiro teste!
<h3>Seria isso um programa?</h3>

<strong>Não</strong> consigo fazer nada além de mostrar conteúdo fixo?
Salve o arquivo e abra novamente a página (se ela já estiver aberta, basta clicar em atualizar no seu navegador).

Não se preocupe com os nomes das diferentes tags (tags são, por exemplo, "strong", "h3", etc). O importante nesse momento é ver como funciona um HTML no geral: através das tags realizamos marcas (markups) no texto para enriquecê-lo.

Esse tipo de texto é conhecido como hipertexto, por permitir navegar entre diferentes páginas e sites. Podemos, por exemplo, adicionar um link (ponteiro) para um site, como o da Casa do Código:

Meu primeiro teste!
<h3>Seria isso um programa?</h3>

<strong>Não</strong> consigo fazer nada além de mostrar conteúdo fixo?

Conheça o site da nossa editora:
<a href="http://www.casadocodigo.com.br">Clique aqui</a>!

A forma de escrever HTML, com aqueles sinais de < e >, também conhecido como a sintaxe do HTML, pode assustar a primeira vez. Assim como o uso do <h3> </h3>, a tag <a ...> "" envolve um pedaço do nosso texto. Mais ainda, ela possui um atributo, nesse caso o tal href, indicando para onde o navegador deve ir se alguém clicar neste link. É comum que tags html possuam diversas propriedades diferentes, modificando a visualização e o comportamento de determinados trechos do documento. Uma tag mais o seu conteúdo forma um elemento HTML, por exemplo o <strong>Não</strong>.

Há muitas tags. Não se preocupe em decorá-las. Você perceberá que com o passar do tempo e a prática, decidir qual tag deverá ser utilizada se tornará um processo natural.

Você já reparou que o navegador não pulou de linha onde sugerimos? Uma das tags que pode ajudar nisso é a <br>. Experimente. Diferente das outras tags que vimos até aqui, ela deve ser utilizada sem o estilo de abrir e fechar, aparecendo apenas uma única vez para cada uso. Vamos utilizá-la com frequência mais adiante.

Está curioso com a sigla HTML? Ela significa Hypertext Markup Language (linguagem de marcação para hiper texto). Ou, em uma tradução bem aberta, uma linguagem que possui tags para marcar documentos do tipo hipertexto. Documento hipertexto é um que pode ter links para outros. O HTML sozinho nada mais é que uma forma de marcação (através das tags). Veremos agora como incrementá-la.

Dê olá ao mundo
Para ter essa interação com o usuário, utilizaremos o JavaScript, uma linguagem que nos permite escrever códigos interessantíssimos. Altere seu arquivo html, adicionando as seguintes linhas no final dele:

<script>
alert("podemos fazer mais com JavaScript!");
</script>

ai ser muito frequente repetir o processo de alteração do nosso código. Esse processo é: adicionar novas linhas no arquivo html, salvá-lo, abri-lo novamente no navegador. Como vimos, em vez de dar dois cliques na página, há também o botão de atualizar (Reload:), que puxará as novas informações do nosso arquivo, executando tudo de novo.

Sim, você já está programando! Parabéns, esse foi seu primeiro código usando a linguagem JavaScript. Passos pequenos e muita prática durante a leitura deste livro o levará mais longe do que imagina.

Algo deu errado? No final dessa lição aprenderemos a usar algumas ferramentas do navegador para nos auxiliar na descoberta dos problemas que podem acontecer. Além disso, todas as lições possuem seções de revisão de código, onde você poderá comparar o código que você fez com o que era esperado.

Repare que nosso código possui uma série de caracteres não usuais, como parênteses e ponto-e-vírgula. Será que não funcionaria fazer um simples alert "olá mundo"? Cada linguagem tem seu conjunto de regras, sua sintaxe, e que devem ser respeitadas para que o código possa ser executado. No caso do JavaScript, há toda uma especificação que os navegadores seguem (ou deveriam seguir).

Caso você esteja estudando através de uma versão digital do livro, pode ter ficado tentado a copiar e colar o código desse alert. Não faça isso. Uma parte muito importante do aprendizado é errar a sintaxe de uma linguagem, além de praticá-la mesmo quando óbvia. Caso você tenha errado algo, o navegador irá emitir uma mensagem de erro. Às vezes ela pode ajudar bastante, mas dependendo do navegador, pode levá-lo ao desespero.

Revise o código: seu primeiro programa
Vimos como escrever nosso primeiro código. Durante todas as lições, sempre teremos seções de revisão. É através dela que você pode verificar o que fez até agora, e também seguir novamente os passos, de maneira mais sucinta, para consolidar seus novos conhecimentos.

Vamos fazer novamente? Abra o editor de texto e digite o seguinte código, que já conhecemos:

Meu primeiro teste!
<h3>Seria isso um programa?</h3>

<strong>Não</strong> consigo fazer nada além de mostrar conteúdo fixo?

Conheça o site da nossa editora:
<a href="http://www.casadocodigo.com.br">Clique aqui</a>!

<script>
alert("podemos fazer mais com JavaScript!");
</script>
Agora, salve-o. Como é um arquivo novo, o editor vai perguntar para você onde e com que nome quer gravá-lo. Escolha uma pasta de fácil acesso e um nome significativo. No nosso caso, usamos como minha_pagina.html. Para não perder o que fez até aqui, pode gravar essa nova versão com outro nome, como por exemplo meu_primeiro_programa.html. Agora encontre o arquivo e dê dois cliques nele. O navegador deve abrir, interpretando as tags HTML e executando nosso código JavaScript!

Socorro! Meu programa não funciona. Conheça e use o console do Chrome
Não se apavore com os erros. É importante saber enfrentá-los. Entender uma mensagem de erro é fundamental. Há sempre também fóruns e listas de discussão onde você pode pedir ajuda. Lembre-se de descrever muito bem seu problema e qual é a mensagem de erro, mas ao mesmo tempo é necessário ser sucinto. O fórum do GUJ é bastante conhecido na comunidade de desenvolvedores brasileiros de diversas linguagens. Utilize-o para tirar suas dúvidas: http://www.guj.com.br

Há alguns erros bem comuns. Um exemplo é não utilizar os parênteses em um alert. Se você fizer isso, nada funcionará e não haverá uma mensagem de erro! Faça o teste, adicionando uma segunda chamada ao alert de forma errada:

<script>
alert("podemos fazer mais com JavaScript!");
alert "chamando sem parenteses";
</script>
O navegador não vai nem mostrar o primeiro alert, onde não há nenhum erro! Como então descobrir o problema? Há uma ferramenta do Chrome para nos auxiliar nessa tarefa.

Clique no ícone de menus/ferramentas. Ele fica no topo superior direito do Chrome. Depois acesse o menu Ferramentas (Tools) e por último Console JavaScript, como na figura. A seguinte janela aparecerá, indicando o erro de sintaxe:

Neste caso, ele está avisando que temos uma string não esperada. Ajudou? Algumas vezes as mensagens de erro podem não ser muito claras, mas já ajudam bastante indicando o local do problema. Repare que, a direita da mensagem de erro, o navegador diz em que arquivo e em qual linha houve o problema, sendo que você pode até mesmo clicar ali para ir diretamente ao trecho de código problemático.

Com essa mensagem de erro, o Chrome quer indicar que o chamando sem parenteses apareceu em um lugar não esperado, como se estivesse falando numa "língua" que ele não entende. Esse tipo de erro é o que chamamos de erro de sintaxe, um erro na forma de se comunicar com quem entende da linguagem. Nesse caso em particular, ele não esperava essa mensagem fora de parênteses. Corrija o problema.

Faça testes com outros erros. Escreva alert de maneira errada, por exemplo, alertar.

Ao mesmo tempo, há algumas mudanças que não impactariam na execução do código. Por exemplo, poderíamos ter dado espaço entre alert e a abertura dos parênteses. E o ponto-e-vírgula, poderíamos omiti-lo? E as aspas? Teste, descubra. É importante experimentar além das nossas lições.

Para o Firefox, há um console semelhante acessando o menu Ferramentas (Tools), Web Developer e depois Console Web. No Internet Explorer 9, você pode encontrá-lo clicando no ícone de engrenagem e escolhendo F12 Ferramentas de Desenvolvedor (Developer Tools).

Socorro! A acentuação não está funcionando corretamente
Apenas no caso de você estar utilizando o Mac ou o Linux, haverá um pequeno problema: a acentuação não aparece corretamente. Quando gravamos arquivos, há diferentes formatos de armazenar os caracteres em bytes. O Chrome, por padrão, tentará lê-lo em uma codificação conhecida por latin1.

Se gravamos nosso arquivo em outro formato, precisamos colocar essa informação no HTML que possui uma série de tags que nem mesmo marcam o texto, e sim dão meta informações ao arquivo. Caso você esteja usando um desses sistema operacionais, acrescente a seguinte linha como sendo a primeira do seu arquivo: <meta charset="UTF-8">. Pense nisso como uma propriedade de um arquivo do Word. São informações que servem não para o usuário final diretamente, mas sim para o navegador poder trabalhar melhor com aquele arquivo.


################# 2. Comunique-se com o usuário #################

O alert é nossa primeira forma de comunicação com o usuário. Como podemos fazer para enviar duas mensagens? Basta executarmos duas vezes essa instrução. Crie um novo arquivo, que será gravado comecando_javascript.html, e coloque o seguinte conteúdo:

<script>
    alert("olá mundo!");
    alert("esse é meu segundo programa");
</script>
Você poderia ter utilizado o mesmo arquivo da lição anterior, mas é bom aqui criarmos um novo para poder acompanhar nosso aprendizado. Lembre-se de salvá-lo e depois abri-lo no seu navegador.

Verifique o resultado. Pode ser um pouco trabalhoso ter de ficar clicando no botão de OK a cada novo alert. Imagine se tivéssemos 15 mensagens para serem mostradas? Você teria que dar 15 cliques no botão OK. Chato, não?

Há várias formas de se comunicar com o usuário através do JavaScript e uma delas é através do document.write. Crie um novo arquivo, o programa2.html com o seguinte código:

<meta charset="UTF-8">

<script>
    document.write("olá mundo!");
    document.write("esse é meu segundo programa");
</script>
Acesse a página e verifique o resultado.

Para não aparecer tudo numa única linha, você pode usar a tag <br>, que já conhecemos, para quebrá-la. Em vez de fazer document.write("olá mundo!");, faça:

document.write("olá mundo!<br>");
Salve o arquivo e atualize a página. Entendeu a função da tag br?

Por enquanto só trabalhamos com mensagens fixas, estáticas. Trabalhamos com sequências de caracteres definidas entre os sinais das aspas. "Casa do código" é uma sequência de caracteres. "Olá Mundo" é uma outra sequência de caracteres, assim como "Eu tenho 25 anos". Mas podemos também trabalhar com números:

<meta charset="UTF-8">

<script>
    document.write("Minha idade é:");
    document.write(25);
</script>
Apenas as aspas se foram na segunda linha. Se estiver usando o Notepad++, vai ver que ele colore o número de forma diferente do que está entre aspas. Será então que não precisaríamos dela para mostrar as sequências de caracteres? Faça o teste sem elas e verá que, se não for apenas números, teremos um erro.

Mas por que utilizar um número sem as aspas? Afinal, poderíamos muito bem ter feito assim:

document.write("25");
Qual é a diferença de 25 para "25"? Quando utilizamos as aspas, estamos dizendo ao JavaScript que queremos que isto seja encarado como uma sequência de caracteres, não como um simples número. A grande diferença estará na forma que a linguagem tratará cada um deles. Experimente fazer uma conta com números:

document.write(25 + 25);
Agora vamos fazer algo muito parecido, utilizando o mesmo operador, porém com duas sequências de caracteres:

document.write("25" + "25");
Esse teste é fundamental para você entender a diferença dos dois conceitos. No segundo caso, o operador + junta as duas sequências de caracteres. Esse processo de juntar sequências de caracteres é chamado de concatenação.

Em muitas linguagens, assim como no JavaScript, uma sequência de caracteres entre aspas é chamada de string. Dizemos então que o +, além de somar números, concatena strings.

Você vai trabalhar com números ou sequências de caracteres (string)? Depende do que quer fazer. Com números, podemos trabalhar as operações matemáticas. Para saber uma estimativa do ano em que você nasceu, subtraímos o ano atual desse valor:

document.write("Eu nasci em: ");
document.write(2012 - 25);
E se em vez de ter feito document.write(2012 - 25), tivéssemos colocado 2012 - 25 todo entre aspas, fazendo document.write("2012 - 25")? Qual é o resultado?

Apenas por uma questão de concisão, às vezes vamos omitir a tag script dos próximos programas, como acabamos de fazer. Você deve sim utilizá-las. Aliás, o que aconteceria com nosso programa no caso de não colocarmos essas instruções dentro da tag script? Faça o teste.

Além do operador de subtração -, há o de soma +, multiplicação * e divisão /. Você pode somar a sua idade a dos autores. Paulo tem 32 anos e Adriano tem 26:

document.write("A soma das nossas idades é: ");
document.write(25 + 32 + 26);
Para calcular a média, basta dividirmos o resultado da soma por 3:

document.write("A média das nossas idades é: ");
document.write(25 + 32 + 26 / 3);
Verifique o resultado. Não é o esperado! A conta de divisão é calculada antes da soma, como na matemática da escola, logo o primeiro valor a ser calculado é 26 / 3. Podemos utilizar parênteses para forçar a ordem desejada do cálculo, realizando primeiramente as somas:

document.write((25 + 32 + 26) / 3);
Os parênteses são utilizados mesmo quando a precedência dos operadores já trabalha conforme esperamos, pois pode facilitar a legibilidade do que queremos fazer.

Também é possível misturar números com strings, mas sempre com cuidado. O que acontece ao somá-los?

document.write("Minha idade é: " + 25);
A sequência de caracteres "Minha idade é" vai aparecer junta ao número 25, isto é, serão concatenadas! Repare também que precisamos tomar cuidado com os parênteses. Vamos misturar strings e números mais uma vez:

document.write("A média das nossas idades é: " + ((25 + 32 + 26) / 3));
Sem esses parênteses, a ordem matemática das operações seria seguida e, assim, a divisão aconteceria primeiro. Depois, como o símbolo + significa concatenação de strings, os números 25, 32 e o resultado da divisão seriam concatenados com a string e o JavaScript geraria um valor que não nos tem muita serventia. Faça o teste! Passo a passo, isso é o que acontece internamente:

document.write("A média das nossas idades é: " + 25 + 32 + 26 / 3);
document.write("A média das nossas idades é: " + 25 + 32 + 8.666666666666666);
document.write("A média das nossas idades é: 25" + 32 + 8.666666666666666);
document.write("A média das nossas idades é: 2532" + 8.666666666666666);
document.write("A média das nossas idades é: 25328.666666666666666");
Crie um arquivo testando_idades.html e vamos revisar o que já aprendemos. Coloque o código que calcula a média das idades:

<meta charset="UTF-8">

<script>
    document.write("Minha idade é: " + 25);
    document.write("A soma das nossas idades é: ");
    document.write(25 + 32 + 26);
    document.write("A média das nossas idades é: " + ((25 + 32 + 26) / 3));
</script>
Cada revisão dessas sempre oferecerá exercícios importantes para que você pratique e fixe o que vimos. Não deixe de ir além e realizar seus próprios testes. Sua curiosidade será importante para seu aprendizado.

Podemos imprimir o ano do nascimento de cada um de nós três, utilizando o recurso de juntar (concatenar) uma sequência de caracteres (uma string) com números.

document.write("Eu nasci em : " + (2012 - 25) + "<br>");
document.write("Adriano nasceu em : " + (2012 - 26) + "<br>");
document.write("Paulo nasceu em : " + (2012 - 32) + "<br>");
Além desse <br> que apareceu muitas vezes, tanto aqui quanto na seção anterior, o número 2012 é bastante repetido


################# 3. Torne seu programa dinâmico com variáveis #################

Cada revisão dessas sempre oferecerá exercícios importantes para que você pratique e fixe o que vimos. Não deixe de ir além e realizar seus próprios testes. Sua curiosidade será importante para seu aprendizado.

Podemos imprimir o ano do nascimento de cada um de nós três, utilizando o recurso de juntar (concatenar) uma sequência de caracteres (uma string) com números.

document.write("Eu nasci em : " + (2012 - 25) + "<br>");
document.write("Adriano nasceu em : " + (2012 - 26) + "<br>");
document.write("Paulo nasceu em : " + (2012 - 32) + "<br>");
Além desse <br> que apareceu muitas vezes, tanto aqui quanto na seção anterior, o número 2012 é bastante repetido. O que acontecerá quando precisarmos atualizar esse número para 2013? Ou quando descobrirmos que Paulo tem na verdade uma idade diferente? Precisaríamos substituir todos esses valores, um a um. Mesmo utilizando um atalho do seu editor para procurar/substituir, essa não é uma opção tão elegante. Além disso, esses números 2012, 25, 26 e 32 aparecem sem um sentido muito claro no seu código: quem lê-los provavelmente terá de se esforçar bastante para compreender o que você desejava expressar através deles.

Como então facilitar a mudança desses números e também tornar nosso código mais compreensível? O ideal seria poder ter uma forma de dizer 2012, sem precisar repeti-lo. Podemos fazer isso atribuindo o valor 2012 a, digamos, ano:

var ano = 2012;
document.write("Eu nasci em : " + (ano - 25) + "<br>");
document.write("Adriano nasceu em : " + (ano - 26) + "<br>");
document.write("Paulo nasceu em : " + (ano - 32) + "<br>");
O que faz o trecho de código var ano = 2012? Ele atribui 2012 a ano. Chamamos ano de variável. Uma variável pode guardar praticamente o que você quiser: um número, uma string, um outro pedaço de código. Podemos fazer o mesmo com a soma das idades:

var eu = 25;
var adriano = 26;
var paulo = 32;

var total = eu + adriano + paulo;
document.write("A soma das idades é: " + total);
var é uma palavra especial no JavaScript. Chamamos esse tipo de palavras de palavras-chave de uma linguagem. Ela tem um tratamento diferenciado, nesse caso criando uma variável. Não se preocupe com a sintaxe, com essa forma diferente de escrever. Ficará mais claro no decorrer das lições.

O operador igual (=) não funciona exatamente como na matemática. Por exemplo, 2012 = ano não funciona, não é o mesmo que ano = 2012. Dizemos que o operador = atribui o valor 2012 à variável, que fica a esquerda do =.

Repare que o uso das aspas define o que será impresso. Se não há aspas dentro dos parenteses do document.write(...), o JavaScript buscará o valor daquela variável. Caso contrário, utilizará o que está dentro das aspas apenas como uma sequência de caracteres (string), como vimos anteriormente. É muito importante você mesmo testar e ver essa diferença:

var ano = 2012;
document.write("ano");
document.write(ano);
O que acontece?

Você utilizará variáveis o tempo inteiro. Vamos praticá-las!

Com essas mudanças no seu código, você pode calcular a média de idade da sua família de uma forma mais organizada, sem copiar os números pra dentro do document.write:

document.write((eu + adriano + paulo) / 3);
Uma outra forma seria quebrar esse processo em passos. É bastante comum criar algumas variáveis a mais para ajudar a legibilidade. Um programador costuma trabalhar em uma equipe, onde outros colegas estarão sempre lendo, modificando e trabalhando com as mesmas linhas de código. A ideia aqui seria criar uma variável para a soma e outra para a média:

var total = eu + adriano + paulo;
var media = total / 3;
document.write(media);
Na seção anterior, escrevemos nosso código de forma mais legível. Caso queira, crie o arquivo testando_idades_com_variaveis.html para praticarmos esse código uma última vez, depois passaremos para um outro problema. Inicialmente coloque a declaração da idade de cada pessoa:

<script>
var eu = 25;
var adriano = 26;
var paulo = 32;
//Depois calculamos os dados que precisamos: o total e a média.


var total = eu + adriano + paulo;
var media = total / 3;
//Por último imprimimos a média e fechamos a tag de `script`:


document.write("A média de idade é " + media);
</script>
Seu código está funcionando? Cuidado com os nomes das variáveis. Você precisa utilizá-las da mesma forma como as declarou. O JavaScript diferencia, inclusive, maiúsculas de minúsculas. Erre o nome de uma variável para você ver qual é a mensagem de erro que aparecerá no JavaScript Console. Por exemplo, mostre med em vez de media, como havia sido declarado:

Exemplo com problema:

document.write("A média de idade é " + med);
É comum digitarmos o nome de uma variável errada. Fique atento e habitue-se a utilizar o JavaScript Console que vimos no fim da lição passada. As mensagens de erro serão em inglês, e algumas vezes não serão tão específicas quanto gostaríamos, mas sempre dizendo com exatidão em que linha do código houve o problema.

Você está cansado de ver um número com tantas casas decimais? Você pode arrendonda-lo com o Math.round(numero). Altere seu código:

document.write("A média de idade é " + Math.round(media));
O Math.round pega o valor que está dentro dos parênteses e o arredonda, utilizando esse novo valor para juntar (concatenar) com o restante da frase que queremos mostrar.

Agora, vamos fazer um exercício completamente novo:

Vimos que utilizar variáveis já ajudou de duas formas: não precisamos mais copiar e colar tanta informação e também alguns trechos ficaram mais legíveis. As variáveis podem ir além, economizando na repetição de linhas de código.