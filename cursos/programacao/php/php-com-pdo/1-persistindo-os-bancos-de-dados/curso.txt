#################### 01.Introdução ao PDO ####################


Olá pessoal, meu nome é Mario, sejam bem-vindos à primeira parte do curso de PHP com PDO! Nele, trabalharemos com o nosso sistema de controle de estoques, que envolve categorias e produtos, e lidaremos com tudo aquilo que se refere às categorias nesta primeira parte.

Basicamente, utilizaremos a classe de conexão com o banco de dados PDO, com que faremos um CRUD completo, para aprendermos como fazer a listagem, inserção, alteração e exclusão de categorias no nosso sistema.

Por que é interessante usarmos o PDO como conexão ao banco de dados no PHP?

O PDO possui a grande vantagem de realizar a abstração da conexão com o banco de dados. Significa que, após esta conexão, tudo aquilo que será feito é igual para qualquer banco de dados.

Ou seja, não teremos métodos específicos para o MySQL, o Oracle ou o SQL Server, por exemplo. Basta informarmos durante a conexão qual o sistema de banco de dados a que nos conectamos para que todo o código permaneça inalterado.

Se um dia tivermos que migrar de um banco de dados a outro, o processo é muito mais simples, pois a alteração é feita em um único local.

Após o término deste curso, é recomendado fazer a segunda parte, em que entraremos na parte de produtos e veremos algumas técnicas mais avançadas do PDO, como a preparação de query para a prevenção de SQL Injection, algo interessante que torna nossa aplicação mais robusta e segura.

Vamos começar?

Caso você não tenha feito ainda os cursos de PHP I: Orientação a objetos com sua linguagem preferida e PHP II: Avançando com Orientação a Objetos, sugiro que dê uma conferida neles, pois alguns conceitos de Orientação a Objeto utilizados neste curso introduzidos neles.

Criando nosso ambiente de Desenvolvimento
Até um tempo atrás, criar um ambiente de desenvolvimento PHP podia ser um pouco complicado e desgastante. Era necessário baixar o binário do PHP, depois um servidor web - normalmente o Apache -, e fazer toda a configuração manualmente para que eles se conversassem e funcionassem bem.

Você também pode usar uma solução como o XAMPP, que traz com ele um Apache já configurado com o PHP, além do banco de dados MySQL, tudo bonito.

Porém, desde a versão 5.3 do PHP, você não precisa mais ter todo esse trabalho para desenvolver nesta linguagem. A partir dessa versão, o PHP traz consigo um pequeno e simples servidor web embutido, bastando usar um único comando no console/terminal/bash de seu sistema operacional para ativá-lo. E uma vez feito isso, pronto, é só abrir seu navegador e sair programando.

Agora vou ensinar como fazer a instalação do binário do PHP e do MariaDB, que usaremos em nosso curso!

Windows
Acesse o link do site do PHP, na versão Current Stable PHP, selecione a opção Windows Download e, depois, baixe a versão Non Thread Safe equivalente ao tipo de arquitetura do seu Sistema Operacional, que pode ser x86 ou x64.

Ou clique diretamente nos links abaixo:

Windows x86

Windows x64

Uma vez baixado o zip, sugiro descompactar a pasta na raiz do seu drive C e renomeá-la para php, deixando-a da seguinte forma:

Assim, precisaremos também colocar esse diretório no path do Windows, processo necessário para podermos usar o comando php em qualquer diretório do Sistema.

Para isso, acesse o Painel de Controle do Windows e clique em Sistemas. Na janela que se abriu, procure no menu lateral esquerdo a opção Configurações Avançadas do Sistema. Na nova janela, clique no ultimo botão chamado Variáveis de Ambiente.

Na seção Variáveis do Sistema, procure pela path e clique em editar. Uma lista com muitas variáveis se abrirá. Clique no botão Novo e, no novo campo que vai se abrir no final da lista, coloque o caminho do diretório da sua instalação do PHP, que se for como colocado aqui, será C:\php.

Feito isso, clique em OK, OK novamente e, por fim, OK. =)

Pronto! Para ver se tudo está funcionando, você pode abrir o prompt de comando do windows e digitar php -v.

Linux (Distribuição baseada no Debian)
Para instalar o PHP no Linux (uma distribuição baseada no Debian como o Ubuntu, por exemplo), abra o terminal e digite o seguintes comandos:

sudo apt-get update
sudo apt-get install libapache2-mod-php7.0 php7.0-mysql php7.0-curl php7.0-json php-memcached php7.0-dev php7.0-mcrypt php7.0-sqlite3 php7.0-mbstring
Para ver se funcionou, após a instalação, basta digitar no terminal php -v.

Mac OS X
Para instalar o PHP no Mac OS X, abra o terminal e digite o seguinte comando:

curl -s https://php-osx.liip.ch/install.sh | bash -s 7.1
export PATH=/usr/local/php5/bin:$PATH
Instalação do MariaDB
Windows
Para instalar o MariaDB no Windows, é muito simples: basta baixar o instalador e seguir o passo a passo. Lembre-se de que é no processo de instalação que você vai definir a senha do banco de dados.

Linux (Distribuição baseada no Debian)
Para instalar o MariaDB no Linux, abra um terminal e use os seguintes comandos:

sudo apt-get update

sudo apt-get upgrade

sudo apt-get install software-properties-common
sudo apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xF1656F24C74CD1D8

sudo add-apt-repository 'deb [arch=amd64,i386,ppc64el] http://ftp.utexas.edu/mariadb/repo/10.1/ubuntu xenial main

sudo apt-get update
sudo apt-get install mariadb-server
Mac OS X
Para instalar o MariaDB no Mac OS X, abra o terminal e digite o seguinte comando:

brew install mariadb
E, depois da instalação, você pode ativar o MariaDB com o comando:

mysql.server start
Material da aula
Aqui você pode baixar o projeto do curso inicial com todo o material do front-end.

Baixe o zip ou visualize os arquivos no Github (https://github.com/alura-cursos/PDO-Alura-Parte1/tree/8088bff7408a766cd4a726feec7e1802ea69425d).




