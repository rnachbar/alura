import React, { Component } from 'react';
import './css/pure-min.css';
import './css/side-menu.css';
import $ from 'jquery';
import InputCustomizado from './componentes/InputCustomizado'
import SubmitCustomizado from './componentes/SubmitCustomizado'

class App extends Component {

  // orientação a objeto é comportamento mais estado

  // estado
  // no construtor se deve inicializar os componentes
  constructor() {
    super(); // chama o contrutor da Component
    // variável state é disponibilizado pelo Component
    this.state = {lista: [], nome:'', email:'', senha:''};
    this.enviaForm = this.enviaForm.bind(this);
    this.setNome = this.setNome.bind(this);
    this.setEmail = this.setEmail.bind(this);
    this.setSenha = this.setSenha.bind(this);
  }

  // BOA PRÁTICA DO REACT (não utilizar componentes no constructor e sim nas seguintes funções)
  // componentDidMount - chamado após o render (componente foi montado)
  // componentWillMount - chamado antes do render (componente vai ser montado)
  // função do React
  componentDidMount() {
    $.ajax({
      url: 'http://localhost:8080/api/autores',
      dataType: 'json',
      success:function(resposta) {
        this.setState({lista:resposta}); // sempre que atualizar o estado, renderizar novamente
      }.bind(this) // informando que o this que será utilizado é o do react e não do ajax
    });    
  }

  enviaForm(evento) {
    evento.preventDefault();

    $.ajax({
      url: 'http://localhost:8080/api/autores',
      contentType: 'application/json',
      dataType: 'json',
      type: 'post',
      data: JSON.stringify({nome:this.state.nome, email:this.state.email, senha:this.state.senha}),
      success: function(resposta) {
        this.setState({lista:resposta});
      }.bind(this),
      error: function(resposta) {
        console.log("erro");
      }
    });
  }

  setNome(evento) {
    this.setState({nome:evento.target.value})
  }

  setEmail(evento) {
    this.setState({email:evento.target.value})
  }

  setSenha(evento) {
    this.setState({senha:evento.target.value})
  }

  // comportamento
  render() {
    // obrigatório chamar o metodo render() pois é ele que é chamado pelo react
    return (
      <div id="layout">

          { /*Comentários no JSX*/ }
          { /*Class virou palavra reservada então chamar classe com className*/ }
          { /*JSX é marcação de XML dentro do seu código JavaScript, XML válido tem tag que abre e tag que fecha (<img></img>)*/ }
          { /*Para juntar código estático com dinamico no JSX usamos as {chaves}*/ }

          { /*Menu toggle*/ }
          <a href="#menu" id="menuLink" className="menu-link">
              { /*Hamburger icon*/ }
              <span></span>
          </a>

          <div id="menu">
              <div className="pure-menu">
                  <a className="pure-menu-heading" href="#">Company</a>

                  <ul className="pure-menu-list">
                      <li className="pure-menu-item"><a href="#" className="pure-menu-link">Home</a></li>
                      <li className="pure-menu-item"><a href="#" className="pure-menu-link">Autor</a></li>
                      <li className="pure-menu-item"><a href="#" className="pure-menu-link">Livros</a></li>
                  </ul>
              </div>
          </div>

          <div id="main">
            <div className="header">
              <h1>Cadastro de Autores</h1>
            </div>
            <div className="content" id="content">
              <div className="pure-form pure-form-aligned">
                <form className="pure-form pure-form-aligned" onSubmit={this.enviaForm} method="post">

                  <InputCustomizado id="nome" type="text" name="nome" value={this.state.nome} onChange={this.setNome} label="Nome" />
                  <InputCustomizado id="email" type="email" name="email" value={this.state.email} onChange={this.setEmail} label="E-mail" />
                  <InputCustomizado id="senha" type="password" name="senha" value={this.state.senha} onChange={this.setSenha} label="Senha" />

                  <SubmitCustomizado label="Gravar" />

                </form>             

              </div>  
              <div>            
                <table className="pure-table">
                  <thead>
                    <tr>
                      <th>Nome</th>
                      <th>email</th>
                    </tr>
                  </thead>
                  <tbody>
                    {
                      this.state.lista.map(function(autor) {
                        return (
                          <tr key={autor.id}>
                            <td>{autor.nome}</td>
                            <td>{autor.email}</td>
                          </tr>
                        );
                      })
                    }
                  </tbody>
                </table> 
              </div>             
            </div>
          </div>

      </div>
    );
  }
}

export default App;
